import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

// Types ƒë·ªÉ ƒë·∫£m b·∫£o type safety
interface UserData {
  id: string;
  email: string;
  username: string;
  firstName: string;
  lastName: string;
  role: 'ADMIN' | 'ARTISAN' | 'CUSTOMER';
  bio?: string;
  isVerified?: boolean;
  password: string;
  emailVerified: boolean;
  followerCount: number;
  followingCount: number;
}

interface ArtisanData {
  shopName: string;
  shopDescription: string;
  specialties: string[];
  experience: number;
  contactEmail: string;
  contactPhone: string;
}

interface ProductData {
  name: string;
  description: string;
  price: number;
  discountPrice?: number;
  quantity: number;
  tags: string[];
  isCustomizable: boolean;
  category: string;
}

interface PostData {
  title: string;
  summary: string;
  content: {
    blocks: Array<{
      type: string;
      content?: string;
      url?: string;
      caption?: string;
    }>;
  };
  type: 'BEHIND_THE_SCENES' | 'TUTORIAL' | 'PRODUCT_SHOWCASE' | 'STORY' | 'EVENT' | 'GENERAL';
  tags: string[];
}

async function main() {
  console.log('üå± B·∫Øt ƒë·∫ßu seed database...');

  // X√≥a d·ªØ li·ªáu c≈© theo th·ª© t·ª± ph·ª• thu·ªôc
  await cleanDatabase();

  // T·∫°o Categories tr∆∞·ªõc
  const categories = await createCategories();

  // T·∫°o Users
  const users = await createUsers();

  // T·∫°o Profiles v√† Addresses
  await createProfilesAndAddresses(users);

  // T·∫°o ArtisanProfiles v√† UpgradeRequests
  await createArtisanProfiles(users);
  await createUpgradeRequests(users);

  // T·∫°o Products
  const products = await createProducts(users, categories);

  // T·∫°o Posts
  const posts = await createPosts(users);

  // T·∫°o Social interactions
  await createFollows(users);
  await createLikesAndSavedPosts(users, posts);
  await createComments(users, posts);

  // T·∫°o Reviews
  await createReviews(users, products);

  // T·∫°o Cart v√† Orders
  await createCartItems(users, products);
  await createOrders(users, products);

  // T·∫°o Quotes
  await createQuoteRequests(users, products);

  // T·∫°o Messages v√† Notifications
  await createMessages(users);
  await createNotifications(users);

  console.log('‚úÖ Seed database th√†nh c√¥ng!');
}

async function cleanDatabase() {
  // X√≥a theo th·ª© t·ª± ng∆∞·ª£c l·∫°i ƒë·ªÉ tr√°nh l·ªói foreign key
  await prisma.notification.deleteMany();
  await prisma.message.deleteMany();
  await prisma.quoteNegotiation.deleteMany();
  await prisma.quoteRequest.deleteMany();
  await prisma.paymentTransaction.deleteMany();
  await prisma.payment.deleteMany();
  await prisma.orderItem.deleteMany();
  await prisma.order.deleteMany();
  await prisma.wishlist.deleteMany();
  await prisma.cartItem.deleteMany();
  await prisma.review.deleteMany();
  await prisma.productMention.deleteMany();
  await prisma.priceHistory.deleteMany();
  await prisma.categoryProduct.deleteMany();
  await prisma.category.deleteMany();
  await prisma.product.deleteMany();
  await prisma.savedPost.deleteMany();
  await prisma.like.deleteMany();
  await prisma.comment.deleteMany();
  await prisma.postAnalytics.deleteMany();
  await prisma.post.deleteMany();
  await prisma.follow.deleteMany();
  await prisma.artisanUpgradeRequest.deleteMany();
  await prisma.artisanProfile.deleteMany();
  await prisma.emailVerification.deleteMany();
  await prisma.passwordReset.deleteMany();
  await prisma.refreshToken.deleteMany();
  await prisma.session.deleteMany();
  await prisma.userActivity.deleteMany();
  await prisma.address.deleteMany();
  await prisma.profile.deleteMany();
  await prisma.user.deleteMany();
}

async function createCategories() {
  const categories = [
    {
      name: 'G·ªëm s·ª©',
      slug: 'gom-su',
      description: 'S·∫£n ph·∫©m g·ªëm s·ª© th·ªß c√¥ng truy·ªÅn th·ªëng',
      level: 0,
      children: [
        { name: 'B√°t ƒëƒ©a', slug: 'bat-dia', description: 'B√°t ƒëƒ©a g·ªëm s·ª© cao c·∫•p' },
        { name: 'B√¨nh hoa', slug: 'binh-hoa', description: 'B√¨nh hoa g·ªëm s·ª© trang tr√≠' },
        { name: '·∫§m tr√†', slug: 'am-tra', description: 'B·ªô ·∫•m tr√† g·ªëm s·ª© B√°t Tr√†ng' },
      ],
    },
    {
      name: 'Th√™u th√πa',
      slug: 'theu-thua',
      description: 'S·∫£n ph·∫©m th√™u tay truy·ªÅn th·ªëng',
      level: 0,
      children: [
        { name: 'Tranh th√™u', slug: 'tranh-theu', description: 'Tranh th√™u tay cao c·∫•p' },
        { name: 'KhƒÉn th√™u', slug: 'khan-theu', description: 'KhƒÉn th√™u tay tinh x·∫£o' },
        { name: '√Åo d√†i th√™u', slug: 'ao-dai-theu', description: '√Åo d√†i th√™u tay ƒë·ªôc ƒë√°o' },
      ],
    },
    {
      name: 'ƒê·ªì g·ªó',
      slug: 'do-go',
      description: 'S·∫£n ph·∫©m g·ªó th·ªß c√¥ng m·ªπ ngh·ªá',
      level: 0,
      children: [
        { name: 'T∆∞·ª£ng g·ªó', slug: 'tuong-go', description: 'T∆∞·ª£ng g·ªó ƒëi√™u kh·∫Øc tinh x·∫£o' },
        { name: 'ƒê·ªì n·ªôi th·∫•t', slug: 'do-noi-that', description: 'N·ªôi th·∫•t g·ªó cao c·∫•p' },
        { name: 'ƒê·ªì l∆∞u ni·ªám', slug: 'do-luu-niem', description: 'ƒê·ªì l∆∞u ni·ªám g·ªó nh·ªè' },
      ],
    },
    {
      name: 'Tranh v·∫Ω',
      slug: 'tranh-ve',
      description: 'Tranh v·∫Ω tay ngh·ªá thu·∫≠t',
      level: 0,
      children: [
        { name: 'Tranh s∆°n d·∫ßu', slug: 'tranh-son-dau', description: 'Tranh s∆°n d·∫ßu cao c·∫•p' },
        { name: 'Tranh l·ª•a', slug: 'tranh-lua', description: 'Tranh v·∫Ω tr√™n l·ª•a' },
        { name: 'Tranh ƒê√¥ng H·ªì', slug: 'tranh-dong-ho', description: 'Tranh d√¢n gian ƒê√¥ng H·ªì' },
      ],
    },
    {
      name: 'ƒê·ªì da',
      slug: 'do-da',
      description: 'S·∫£n ph·∫©m da th·ªß c√¥ng',
      level: 0,
      children: [
        { name: 'V√≠ da', slug: 'vi-da', description: 'V√≠ da th·ªß c√¥ng cao c·∫•p' },
        { name: 'T√∫i x√°ch', slug: 'tui-xach', description: 'T√∫i x√°ch da th·ªß c√¥ng' },
        { name: 'Gi√†y d√©p', slug: 'giay-dep', description: 'Gi√†y d√©p da th·ªß c√¥ng' },
      ],
    },
  ];

  const createdCategories = [];

  for (const category of categories) {
    const parent = await prisma.category.create({
      data: {
        name: category.name,
        slug: category.slug,
        description: category.description,
        level: category.level,
        sortOrder: categories.indexOf(category),
      },
    });

    createdCategories.push(parent);

    if (category.children) {
      for (const child of category.children) {
        const childCategory = await prisma.category.create({
          data: {
            name: child.name,
            slug: child.slug,
            description: child.description,
            parentId: parent.id,
            level: 1,
            sortOrder: category.children.indexOf(child),
          },
        });
        createdCategories.push(childCategory);
      }
    }
  }

  return createdCategories;
}

async function createUsers(): Promise<UserData[]> {
  const hashedPassword = await bcrypt.hash('123456', 10);

  const userData = [
    // Admin
    {
      email: 'admin@artisan.vn',
      username: 'admin',
      firstName: 'Nguy·ªÖn',
      lastName: 'Admin',
      role: 'ADMIN' as const,
      bio: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng Artisan Connect',
    },
    // Artisans
    {
      email: 'nguyenthimai@artisan.vn',
      username: 'mai_gom_batrang',
      firstName: 'Nguy·ªÖn Th·ªã',
      lastName: 'Mai',
      role: 'ARTISAN' as const,
      bio: 'Ngh·ªá nh√¢n g·ªëm s·ª© B√°t Tr√†ng v·ªõi 20 nƒÉm kinh nghi·ªám',
      isVerified: true,
    },
    {
      email: 'tranvanminh@artisan.vn',
      username: 'minh_go_cao_cap',
      firstName: 'Tr·∫ßn VƒÉn',
      lastName: 'Minh',
      role: 'ARTISAN' as const,
      bio: 'Th·ª£ m·ªôc chuy√™n ƒë·ªì g·ªó n·ªôi th·∫•t cao c·∫•p t·ª´ g·ªó qu√Ω',
      isVerified: true,
    },
    {
      email: 'phamthilan@artisan.vn',
      username: 'lan_theu_tay',
      firstName: 'Ph·∫°m Th·ªã',
      lastName: 'Lan',
      role: 'ARTISAN' as const,
      bio: 'Ngh·ªá nh√¢n th√™u tay truy·ªÅn th·ªëng l√†ng Qu·∫•t ƒê·ªông',
      isVerified: true,
    },
    {
      email: 'levanhoang@artisan.vn',
      username: 'hoang_tranh_son_mai',
      firstName: 'L√™ VƒÉn',
      lastName: 'Ho√†ng',
      role: 'ARTISAN' as const,
      bio: 'H·ªça sƒ© chuy√™n tranh s∆°n m√†i v√† tranh l·ª•a',
    },
    {
      email: 'ngothihong@artisan.vn',
      username: 'hong_da_that',
      firstName: 'Ng√¥ Th·ªã',
      lastName: 'H·ªìng',
      role: 'ARTISAN' as const,
      bio: 'Th·ª£ da th·ªß c√¥ng v·ªõi 15 nƒÉm kinh nghi·ªám',
    },
    // Customers
    {
      email: 'dinhvannam@gmail.com',
      username: 'nam_collector',
      firstName: 'ƒêinh VƒÉn',
      lastName: 'Nam',
      role: 'CUSTOMER' as const,
      bio: 'Ng∆∞·ªùi y√™u th√≠ch v√† s∆∞u t·∫ßm ƒë·ªì th·ªß c√¥ng m·ªπ ngh·ªá',
    },
    {
      email: 'vuthihuong@gmail.com',
      username: 'huong_decor',
      firstName: 'V≈© Th·ªã',
      lastName: 'H∆∞∆°ng',
      role: 'CUSTOMER' as const,
      bio: 'Chuy√™n gia trang tr√≠ n·ªôi th·∫•t, ƒëam m√™ ƒë·ªì handmade',
    },
    {
      email: 'nguyenquanghuy@gmail.com',
      username: 'huy_artlover',
      firstName: 'Nguy·ªÖn Quang',
      lastName: 'Huy',
      role: 'CUSTOMER' as const,
      bio: 'Kinh doanh qu√† t·∫∑ng cao c·∫•p',
    },
    {
      email: 'tranthithuy@gmail.com',
      username: 'thuy_fashion',
      firstName: 'Tr·∫ßn Th·ªã',
      lastName: 'Th·ªßy',
      role: 'CUSTOMER' as const,
      bio: 'Y√™u th√≠ch th·ªùi trang v√† ph·ª• ki·ªán th·ªß c√¥ng',
    },
    {
      email: 'hoangvanduc@gmail.com',
      username: 'duc_antique',
      firstName: 'Ho√†ng VƒÉn',
      lastName: 'ƒê·ª©c',
      role: 'CUSTOMER' as const,
      bio: 'S∆∞u t·∫ßm ƒë·ªì c·ªï v√† ƒë·ªì th·ªß c√¥ng truy·ªÅn th·ªëng',
    },
    {
      email: 'phamvankhoa@gmail.com',
      username: 'khoa_designer',
      firstName: 'Ph·∫°m VƒÉn',
      lastName: 'Khoa',
      role: 'CUSTOMER' as const,
      bio: 'Designer n·ªôi th·∫•t, t√¨m ki·∫øm s·∫£n ph·∫©m ƒë·ªôc ƒë√°o',
    },
    {
      email: 'nguyenthihanh@gmail.com',
      username: 'hanh_gift',
      firstName: 'Nguy·ªÖn Th·ªã',
      lastName: 'H·∫°nh',
      role: 'CUSTOMER' as const,
      bio: 'Ch·ªß shop qu√† t·∫∑ng handmade',
    },
  ];

  const users: UserData[] = [];
  for (const data of userData) {
    const user = await prisma.user.create({
      data: {
        ...data,
        password: hashedPassword,
        emailVerified: true,
        followerCount: Math.floor(Math.random() * 1000),
        followingCount: Math.floor(Math.random() * 500),
      },
    });
    users.push(user as UserData);
  }

  return users;
}

async function createProfilesAndAddresses(users: UserData[]) {
  for (const user of users) {
    const profile = await prisma.profile.create({
      data: {
        userId: user.id,
        coverUrl: `https://picsum.photos/seed/${user.id}/1200/400`,
        location: getRandomLocation(),
        website: user.role === 'ARTISAN' ? `https://${user.username}.artisan.vn` : null,
        dateOfBirth: new Date(
          1970 + Math.floor(Math.random() * 30),
          Math.floor(Math.random() * 12),
          Math.floor(Math.random() * 28),
        ),
        gender: Math.random() > 0.5 ? 'Nam' : 'N·ªØ',
        socialLinks: {
          facebook: `https://facebook.com/${user.username}`,
          instagram: `https://instagram.com/${user.username}`,
        },
      },
    });

    // T·∫°o 1-3 ƒë·ªãa ch·ªâ cho m·ªói user
    const addressCount = Math.floor(Math.random() * 3) + 1;
    for (let i = 0; i < addressCount; i++) {
      const addressData = generateAddress();
      await prisma.address.create({
        data: {
          profileId: profile.id,
          fullName: `${user.firstName} ${user.lastName}`,
          phone: generatePhoneNumber(),
          street: addressData.street,
          city: addressData.city,
          state: addressData.state,
          zipCode: addressData.zipCode,
          country: addressData.country,
          isDefault: i === 0,
        },
      });
    }
  }
}

async function createArtisanProfiles(users: UserData[]) {
  const artisans = users.filter((u) => u.role === 'ARTISAN');
  const profiles = [];

  const artisanData: ArtisanData[] = [
    {
      shopName: 'G·ªëm s·ª© Mai B√°t Tr√†ng',
      shopDescription:
        'C·ª≠a h√†ng g·ªëm s·ª© gia truy·ªÅn 3 ƒë·ªùi t·∫°i l√†ng g·ªëm B√°t Tr√†ng. Chuy√™n s·∫£n xu·∫•t g·ªëm s·ª© cao c·∫•p theo ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng k·∫øt h·ª£p hi·ªán ƒë·∫°i.',
      specialties: ['G·ªëm s·ª©', 'B√°t ƒëƒ©a', 'B√¨nh hoa'],
      experience: 20,
      contactEmail: 'gommai@batrang.vn',
      contactPhone: '0912345678',
    },
    {
      shopName: 'N·ªôi th·∫•t g·ªó Minh Ph√∫c',
      shopDescription:
        'X∆∞·ªüng m·ªôc chuy√™n s·∫£n xu·∫•t ƒë·ªì g·ªó n·ªôi th·∫•t cao c·∫•p t·ª´ g·ªó qu√Ω nh∆∞ g·ªó h∆∞∆°ng, g·ªó g·ª•. Nh·∫≠n ƒë·∫∑t h√†ng theo y√™u c·∫ßu.',
      specialties: ['ƒê·ªì g·ªó', 'N·ªôi th·∫•t', 'ƒêi√™u kh·∫Øc'],
      experience: 25,
      contactEmail: 'noithatminhphuc@gmail.com',
      contactPhone: '0923456789',
    },
    {
      shopName: 'Th√™u tay Lan Hu·∫ø',
      shopDescription:
        'C·ª≠a h√†ng th√™u tay truy·ªÅn th·ªëng, chuy√™n c√°c s·∫£n ph·∫©m th√™u tay cao c·∫•p nh∆∞ tranh th√™u, √°o d√†i th√™u, khƒÉn th√™u.',
      specialties: ['Th√™u th√πa', 'Tranh th√™u', '√Åo d√†i'],
      experience: 15,
      contactEmail: 'theulanhue@gmail.com',
      contactPhone: '0934567890',
    },
    {
      shopName: 'Tranh s∆°n m√†i Ho√†ng Gia',
      shopDescription:
        'H·ªça sƒ© chuy√™n v·∫Ω tranh s∆°n m√†i, tranh l·ª•a theo phong c√°ch truy·ªÅn th·ªëng v√† hi·ªán ƒë·∫°i.',
      specialties: ['Tranh v·∫Ω', 'S∆°n m√†i', 'Tranh l·ª•a'],
      experience: 18,
      contactEmail: 'tranhhoanggia@artisan.vn',
      contactPhone: '0945678901',
    },
    {
      shopName: 'Da th·ªß c√¥ng H·ªìng H√†',
      shopDescription:
        'X∆∞·ªüng da th·ªß c√¥ng chuy√™n s·∫£n xu·∫•t v√≠ da, t√∫i x√°ch da, gi√†y d√©p da cao c·∫•p t·ª´ da th·∫≠t 100%.',
      specialties: ['ƒê·ªì da', 'V√≠ da', 'T√∫i x√°ch'],
      experience: 15,
      contactEmail: 'dahongha@gmail.com',
      contactPhone: '0956789012',
    },
  ];

  // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° bounds
  const maxItems = Math.min(artisans.length, artisanData.length);

  for (let i = 0; i < maxItems; i++) {
    const artisan = artisans[i]!;
    const artisanInfo = artisanData[i]!;

    const profile = await prisma.artisanProfile.create({
      data: {
        userId: artisan.id,
        shopName: artisanInfo.shopName,
        shopDescription: artisanInfo.shopDescription,
        specialties: artisanInfo.specialties,
        experience: artisanInfo.experience,
        website: `https://${artisanInfo.shopName.replace(/\s+/g, '')}.com`,
        contactEmail: artisanInfo.contactEmail,
        contactPhone: artisanInfo.contactPhone,
        shopLogoUrl: `https://picsum.photos/seed/${artisan.id}-logo/200/200`,
        shopBannerUrl: `https://picsum.photos/seed/${artisan.id}-banner/1200/400`,
        isVerified: artisan.isVerified || false,
        rating: 4 + Math.random(),
        reviewCount: Math.floor(Math.random() * 200) + 50,
        totalSales: Math.floor(Math.random() * 50000000) + 10000000,
        socialMedia: {
          facebook: `https://facebook.com/${artisanInfo.shopName.replace(/\s+/g, '')}`,
          instagram: `https://instagram.com/${artisanInfo.shopName.replace(/\s+/g, '')}`,
          youtube:
            Math.random() > 0.5
              ? `https://youtube.com/@${artisanInfo.shopName.replace(/\s+/g, '')}`
              : null,
        },
      },
    });
    profiles.push(profile);
  }

  return profiles;
}

async function createUpgradeRequests(users: UserData[]) {
  const customers = users.filter((u) => u.role === 'CUSTOMER').slice(0, 3);

  const requestData = [
    {
      shopName: 'M·ªπ ngh·ªá tre tr√∫c Vi·ªát',
      shopDescription: 'Chuy√™n s·∫£n xu·∫•t ƒë·ªì th·ªß c√¥ng t·ª´ tre tr√∫c nh∆∞ gi·ªè, r·ªï, ƒë√®n trang tr√≠.',
      specialties: ['Tre tr√∫c', 'ƒêan l√°t', 'Trang tr√≠'],
      experience: 10,
      reason: 'T√¥i mu·ªën m·ªü r·ªông kinh doanh v√† chia s·∫ª ngh·ªá thu·∫≠t ƒëan tre tr√∫c truy·ªÅn th·ªëng',
      status: 'PENDING' as const,
      adminNotes: null,
      reviewedAt: null,
    },
    {
      shopName: 'T∆° l·ª•a B·∫£o L·ªôc',
      shopDescription: 'S·∫£n xu·∫•t v√† kinh doanh c√°c s·∫£n ph·∫©m t·ª´ t∆° l·ª•a B·∫£o L·ªôc ch√≠nh g·ªëc.',
      specialties: ['T∆° l·ª•a', 'KhƒÉn l·ª•a', '√Åo d√†i'],
      experience: 8,
      reason: 'Mong mu·ªën qu·∫£ng b√° s·∫£n ph·∫©m t∆° l·ª•a B·∫£o L·ªôc ra th·ªã tr∆∞·ªùng r·ªông h∆°n',
      status: 'APPROVED' as const,
      adminNotes: 'ƒê√£ x√°c minh th√¥ng tin, ch·∫•p thu·∫≠n n√¢ng c·∫•p',
      reviewedAt: new Date('2024-01-15'),
    },
    {
      shopName: 'ƒê·ªìng h·ªì c·ªï S√†i G√≤n',
      shopDescription: 'S∆∞u t·∫ßm v√† ph·ª•c ch·∫ø ƒë·ªìng h·ªì c·ªï',
      specialties: ['ƒê·ªìng h·ªì c·ªï', 'Ph·ª•c ch·∫ø', 'S∆∞u t·∫ßm'],
      experience: 5,
      reason: 'Kinh nghi·ªám ch∆∞a ƒë·ªß 7 nƒÉm theo y√™u c·∫ßu',
      status: 'REJECTED' as const,
      adminNotes: 'C·∫ßn th√™m kinh nghi·ªám, c√≥ th·ªÉ n·ªôp l·∫°i sau',
      reviewedAt: new Date('2024-01-10'),
    },
  ];

  const maxItems = Math.min(requestData.length, customers.length);

  for (let i = 0; i < maxItems; i++) {
    const customer = customers[i]!;
    const request = requestData[i]!;

    await prisma.artisanUpgradeRequest.create({
      data: {
        userId: customer.id,
        shopName: request.shopName,
        shopDescription: request.shopDescription,
        specialties: request.specialties,
        experience: request.experience,
        reason: request.reason,
        status: request.status,
        adminNotes: request.adminNotes,
        reviewedAt: request.reviewedAt,
        website: Math.random() > 0.5 ? `https://${request.shopName.replace(/\s+/g, '')}.com` : null,
        socialMedia: {
          facebook: `https://facebook.com/${request.shopName.replace(/\s+/g, '')}`,
        },
      },
    });
  }
}

async function createProducts(users: UserData[], categories: any[]) {
  const artisans = users.filter((u) => u.role === 'ARTISAN');
  const products = [];

  const productData: ProductData[] = [
    // G·ªëm s·ª©
    {
      name: 'B·ªô ·∫•m tr√† men r·∫°n c·ªï',
      description: 'B·ªô ·∫•m tr√† g·ªìm 1 ·∫•m v√† 6 ch√©n, men r·∫°n c·ªï ƒë·ªôc ƒë√°o, phong c√°ch cung ƒë√¨nh Hu·∫ø.',
      price: 2500000,
      discountPrice: 2200000,
      quantity: 15,
      tags: ['g·ªëm s·ª©', '·∫•m tr√†', 'b√°t tr√†ng', 'men r·∫°n'],
      isCustomizable: true,
      category: '·∫§m tr√†',
    },
    {
      name: 'B√¨nh hoa sen xanh ng·ªçc',
      description:
        'B√¨nh hoa g·ªëm s·ª© cao 30cm, h·ªça ti·∫øt hoa sen tinh x·∫£o, men xanh ng·ªçc truy·ªÅn th·ªëng.',
      price: 1800000,
      quantity: 20,
      tags: ['g·ªëm s·ª©', 'b√¨nh hoa', 'trang tr√≠', 'sen'],
      isCustomizable: false,
      category: 'B√¨nh hoa',
    },
    {
      name: 'B·ªô b√°t ƒëƒ©a B√°t Tr√†ng cao c·∫•p',
      description:
        'B·ªô 10 b√°t 10 ƒëƒ©a v·∫Ω v√†ng 24k, h·ªça ti·∫øt r·ªìng ph∆∞·ª£ng, th√≠ch h·ª£p cho c√°c d·ªãp l·ªÖ t·∫øt.',
      price: 5500000,
      quantity: 8,
      tags: ['b√°t ƒëƒ©a', 'b√°t tr√†ng', 'v·∫Ω v√†ng', 'cao c·∫•p'],
      isCustomizable: true,
      category: 'B√°t ƒëƒ©a',
    },
    // ƒê·ªì g·ªó
    {
      name: 'T∆∞·ª£ng Ph·∫≠t Di L·∫∑c g·ªó h∆∞∆°ng',
      description: 'T∆∞·ª£ng Ph·∫≠t Di L·∫∑c cao 50cm, ch·∫°m kh·∫Øc tinh x·∫£o t·ª´ g·ªó h∆∞∆°ng nguy√™n kh·ªëi.',
      price: 15000000,
      quantity: 3,
      tags: ['t∆∞·ª£ng g·ªó', 'ph·∫≠t di l·∫∑c', 'g·ªó h∆∞∆°ng', 'phong th·ªßy'],
      isCustomizable: false,
      category: 'T∆∞·ª£ng g·ªó',
    },
    {
      name: 'B√†n tr√† g·ªó g·ª•',
      description: 'B√†n tr√† ki·ªÉu c·ªï ƒëi·ªÉn, g·ªó g·ª• nguy√™n kh·ªëi, k√≠ch th∆∞·ªõc 120x60x40cm.',
      price: 25000000,
      discountPrice: 22000000,
      quantity: 2,
      tags: ['b√†n tr√†', 'g·ªó g·ª•', 'n·ªôi th·∫•t', 'c·ªï ƒëi·ªÉn'],
      isCustomizable: true,
      category: 'ƒê·ªì n·ªôi th·∫•t',
    },
    {
      name: 'H·ªôp ƒë·ª±ng trang s·ª©c g·ªó tr·∫Øc',
      description: 'H·ªôp g·ªó tr·∫Øc 3 t·∫ßng, kh·∫£m trai, ph√π h·ª£p l√†m qu√† t·∫∑ng cao c·∫•p.',
      price: 3500000,
      quantity: 10,
      tags: ['h·ªôp g·ªó', 'g·ªó tr·∫Øc', 'trang s·ª©c', 'qu√† t·∫∑ng'],
      isCustomizable: false,
      category: 'ƒê·ªì l∆∞u ni·ªám',
    },
    // Th√™u th√πa
    {
      name: 'Tranh th√™u ƒê·ªìng Qu√™ Vi·ªát Nam',
      description: 'Tranh th√™u tay 100% l·ª•a t∆° t·∫±m, k√≠ch th∆∞·ªõc 80x60cm, khung g·ªó g·ª•.',
      price: 8500000,
      quantity: 5,
      tags: ['tranh th√™u', 'ƒë·ªìng qu√™', 'l·ª•a', 'th·ªß c√¥ng'],
      isCustomizable: false,
      category: 'Tranh th√™u',
    },
    {
      name: '√Åo d√†i th√™u hoa sen',
      description: '√Åo d√†i l·ª•a th√™u tay hoa sen, may ƒëo theo y√™u c·∫ßu, th·ªùi gian 15-20 ng√†y.',
      price: 4500000,
      quantity: 0,
      tags: ['√°o d√†i', 'th√™u tay', 'hoa sen', 'ƒë·∫∑t may'],
      isCustomizable: true,
      category: '√Åo d√†i th√™u',
    },
    {
      name: 'KhƒÉn cho√†ng th√™u h·ªça ti·∫øt d√¢n t·ªôc',
      description: "KhƒÉn cho√†ng l·ª•a th√™u h·ªça ti·∫øt d√¢n t·ªôc H'M√¥ng, k√≠ch th∆∞·ªõc 180x60cm.",
      price: 1200000,
      quantity: 25,
      tags: ['khƒÉn th√™u', 'd√¢n t·ªôc', "h'm√¥ng", 'th·ªùi trang'],
      isCustomizable: false,
      category: 'KhƒÉn th√™u',
    },
    // Tranh v·∫Ω
    {
      name: 'Tranh s∆°n d·∫ßu Ph·ªë c·ªï H√† N·ªôi',
      description: 'Tranh s∆°n d·∫ßu v·∫Ω tay, k√≠ch th∆∞·ªõc 100x70cm, phong c·∫£nh ph·ªë c·ªï H√† N·ªôi.',
      price: 12000000,
      quantity: 1,
      tags: ['tranh s∆°n d·∫ßu', 'ph·ªë c·ªï', 'h√† n·ªôi', 'ngh·ªá thu·∫≠t'],
      isCustomizable: false,
      category: 'Tranh s∆°n d·∫ßu',
    },
    {
      name: 'Tranh l·ª•a C√¥ g√°i Vi·ªát',
      description: 'Tranh v·∫Ω tr√™n l·ª•a, ch√¢n dung c√¥ g√°i Vi·ªát trong t√† √°o d√†i, 60x40cm.',
      price: 6500000,
      quantity: 3,
      tags: ['tranh l·ª•a', 'ch√¢n dung', '√°o d√†i', 'vi·ªát nam'],
      isCustomizable: false,
      category: 'Tranh l·ª•a',
    },
    {
      name: 'B·ªô tranh ƒê√¥ng H·ªì 12 con gi√°p',
      description: 'B·ªô 12 tranh ƒê√¥ng H·ªì truy·ªÅn th·ªëng, in t·ª´ b·∫£n kh·∫Øc g·ªó, khung tre.',
      price: 3600000,
      discountPrice: 3000000,
      quantity: 10,
      tags: ['tranh ƒë√¥ng h·ªì', '12 con gi√°p', 'd√¢n gian', 'truy·ªÅn th·ªëng'],
      isCustomizable: false,
      category: 'Tranh ƒê√¥ng H·ªì',
    },
    // ƒê·ªì da
    {
      name: 'V√≠ da b√≤ handmade',
      description: 'V√≠ da b√≤ th·∫≠t 100%, may th·ªß c√¥ng, nhi·ªÅu ngƒÉn ti·ªán d·ª•ng, kh·∫Øc t√™n mi·ªÖn ph√≠.',
      price: 850000,
      quantity: 30,
      tags: ['v√≠ da', 'da b√≤', 'handmade', 'kh·∫Øc t√™n'],
      isCustomizable: true,
      category: 'V√≠ da',
    },
    {
      name: 'T√∫i x√°ch da vintage',
      description: 'T√∫i x√°ch da b√≤ wax, phong c√°ch vintage, k√≠ch th∆∞·ªõc 35x25x10cm.',
      price: 2800000,
      quantity: 15,
      tags: ['t√∫i x√°ch', 'da b√≤', 'vintage', 'th·ªùi trang'],
      isCustomizable: false,
      category: 'T√∫i x√°ch',
    },
    {
      name: 'Gi√†y da nam Oxford',
      description: 'Gi√†y da b√≤ cao c·∫•p, ƒë·∫ø da, may Blake, size 38-44.',
      price: 3500000,
      discountPrice: 3200000,
      quantity: 20,
      tags: ['gi√†y da', 'oxford', 'nam', 'cao c·∫•p'],
      isCustomizable: true,
      category: 'Gi√†y d√©p',
    },
  ];

  // Ph√¢n b·ªï s·∫£n ph·∫©m cho c√°c artisan
  for (let i = 0; i < productData.length; i++) {
    const artisan = artisans[i % artisans.length]!;
    const productInfo = productData[i]!;
    const productCategory = categories.find((c) => c.name === productInfo.category);

    const product = await prisma.product.create({
      data: {
        sellerId: artisan.id,
        name: productInfo.name,
        slug: generateSlug(productInfo.name),
        description: productInfo.description,
        price: productInfo.price,
        discountPrice: productInfo.discountPrice || null,
        quantity: productInfo.quantity,
        status: productInfo.quantity > 0 ? 'PUBLISHED' : 'OUT_OF_STOCK',
        images: generateProductImages(i, 3),
        tags: productInfo.tags,
        isCustomizable: productInfo.isCustomizable,
        avgRating: 4 + Math.random() * 0.9,
        reviewCount: Math.floor(Math.random() * 50) + 10,
        viewCount: Math.floor(Math.random() * 1000) + 100,
        salesCount: Math.floor(Math.random() * 100) + 10,
      },
    });

    // Link v·ªõi category
    if (productCategory) {
      await prisma.categoryProduct.create({
        data: {
          categoryId: productCategory.id,
          productId: product.id,
        },
      });
    }

    // T·∫°o price history
    await prisma.priceHistory.create({
      data: {
        productId: product.id,
        price: product.price,
        changeNote: 'Gi√° kh·ªüi t·∫°o',
      },
    });

    products.push(product);
  }

  return products;
}

async function createPosts(users: UserData[]) {
  const posts = [];
  const artisans = users.filter((u) => u.role === 'ARTISAN');
  const allUsers = [...users];

  const postData: PostData[] = [
    {
      title: 'Quy tr√¨nh l√†m g·ªëm s·ª© B√°t Tr√†ng truy·ªÅn th·ªëng',
      summary:
        'Kh√°m ph√° quy tr√¨nh l√†m g·ªëm s·ª© th·ªß c√¥ng t·∫°i l√†ng ngh·ªÅ B√°t Tr√†ng v·ªõi h∆°n 700 nƒÉm l·ªãch s·ª≠.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content:
              'L√†ng g·ªëm B√°t Tr√†ng c√≥ l·ªãch s·ª≠ h∆°n 700 nƒÉm, n·ªïi ti·∫øng v·ªõi nh·ªØng s·∫£n ph·∫©m g·ªëm s·ª© tinh x·∫£o...',
          },
          {
            type: 'image',
            url: 'https://picsum.photos/800/600',
            caption: 'Ngh·ªá nh√¢n ƒëang t·∫°o h√¨nh s·∫£n ph·∫©m',
          },
        ],
      },
      type: 'BEHIND_THE_SCENES',
      tags: ['g·ªëm s·ª©', 'b√°t tr√†ng', 'l√†ng ngh·ªÅ', 'th·ªß c√¥ng'],
    },
    {
      title: 'H∆∞·ªõng d·∫´n chƒÉm s√≥c ƒë·ªì g·ªó ƒë√∫ng c√°ch',
      summary: 'Nh·ªØng b√≠ quy·∫øt gi√∫p ƒë·ªì g·ªó c·ªßa b·∫°n lu√¥n b·ªÅn ƒë·∫πp theo th·ªùi gian.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'ƒê·ªì g·ªó c·∫ßn ƒë∆∞·ª£c chƒÉm s√≥c ƒë√∫ng c√°ch ƒë·ªÉ gi·ªØ ƒë∆∞·ª£c v·∫ª ƒë·∫πp t·ª± nhi√™n...',
          },
        ],
      },
      type: 'TUTORIAL',
      tags: ['ƒë·ªì g·ªó', 'b·∫£o qu·∫£n', 'm·∫πo hay'],
    },
    {
      title: 'B·ªô s∆∞u t·∫≠p tranh th√™u Xu√¢n 2024',
      summary: 'Gi·ªõi thi·ªáu b·ªô s∆∞u t·∫≠p tranh th√™u tay m·ªõi nh·∫•t v·ªõi ch·ªß ƒë·ªÅ m√πa xu√¢n.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'Xu√¢n v·ªÅ, ch√∫ng t√¥i xin gi·ªõi thi·ªáu b·ªô s∆∞u t·∫≠p tranh th√™u tay ƒë·ªôc ƒë√°o...',
          },
        ],
      },
      type: 'PRODUCT_SHOWCASE',
      tags: ['tranh th√™u', 'xu√¢n 2024', 'b·ªô s∆∞u t·∫≠p', 'ngh·ªá thu·∫≠t'],
    },
    {
      title: 'C√¢u chuy·ªán v·ªÅ ngh·ªÅ l√†m tranh s∆°n m√†i',
      summary: 'H√†nh tr√¨nh 30 nƒÉm g·∫Øn b√≥ v·ªõi ngh·ªÅ c·ªßa ngh·ªá nh√¢n Nguy·ªÖn VƒÉn A.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'T√¥i b·∫Øt ƒë·∫ßu h·ªçc ngh·ªÅ t·ª´ nƒÉm 15 tu·ªïi, theo cha v√†o x∆∞·ªüng s∆°n m√†i...',
          },
        ],
      },
      type: 'STORY',
      tags: ['s∆°n m√†i', 'ngh·ªá nh√¢n', 'c√¢u chuy·ªán', 'truy·ªÅn th·ªëng'],
    },
    {
      title: 'Tri·ªÉn l√£m Th·ªß c√¥ng m·ªπ ngh·ªá Vi·ªát Nam 2024',
      summary: 'Th√¥ng tin v·ªÅ tri·ªÉn l√£m th·ªß c√¥ng m·ªπ ngh·ªá l·ªõn nh·∫•t nƒÉm t·∫°i H√† N·ªôi.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'Tri·ªÉn l√£m s·∫Ω di·ªÖn ra t·ª´ ng√†y 15-20/3/2024 t·∫°i Cung VƒÉn h√≥a H·ªØu ngh·ªã...',
          },
        ],
      },
      type: 'EVENT',
      tags: ['tri·ªÉn l√£m', 's·ª± ki·ªán', 'th·ªß c√¥ng m·ªπ ngh·ªá', 'h√† n·ªôi'],
    },
    {
      title: 'Xu h∆∞·ªõng ƒë·ªì da th·ªß c√¥ng 2024',
      summary: 'Nh·ªØng xu h∆∞·ªõng m·ªõi trong thi·∫øt k·∫ø v√† s·∫£n xu·∫•t ƒë·ªì da th·ªß c√¥ng.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'NƒÉm 2024 ch·ª©ng ki·∫øn s·ª± tr·ªü l·∫°i c·ªßa phong c√°ch vintage trong ƒë·ªì da...',
          },
        ],
      },
      type: 'GENERAL',
      tags: ['ƒë·ªì da', 'xu h∆∞·ªõng', '2024', 'th·ªùi trang'],
    },
    {
      title: 'B√≠ quy·∫øt ch·ªçn g·ªëm s·ª© phong th·ªßy',
      summary: 'H∆∞·ªõng d·∫´n ch·ªçn ƒë·ªì g·ªëm s·ª© ph√π h·ª£p v·ªõi phong th·ªßy gia ƒë√¨nh.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'Trong phong th·ªßy, g·ªëm s·ª© kh√¥ng ch·ªâ l√† v·∫≠t trang tr√≠ m√† c√≤n mang √Ω nghƒ©a...',
          },
        ],
      },
      type: 'GENERAL',
      tags: ['g·ªëm s·ª©', 'phong th·ªßy', 'trang tr√≠', 'gia ƒë√¨nh'],
    },
    {
      title: 'Quy tr√¨nh d·ªát l·ª•a t∆° t·∫±m truy·ªÅn th·ªëng',
      summary: 'Kh√°m ph√° quy tr√¨nh d·ªát l·ª•a t∆° t·∫±m th·ªß c√¥ng t·∫°i B·∫£o L·ªôc.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'T·ª´ vi·ªác nu√¥i t·∫±m, ∆∞∆°m t∆° ƒë·∫øn d·ªát th√†nh ph·∫©m, m·ªói c√¥ng ƒëo·∫°n ƒë·ªÅu ƒë√≤i h·ªèi...',
          },
        ],
      },
      type: 'BEHIND_THE_SCENES',
      tags: ['t∆° l·ª•a', 'b·∫£o l·ªôc', 'th·ªß c√¥ng', 'quy tr√¨nh'],
    },
    {
      title: 'K·ªπ thu·∫≠t ch·∫°m kh·∫Øc g·ªó c∆° b·∫£n',
      summary: 'H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc ch·∫°m kh·∫Øc g·ªó.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'Ch·∫°m kh·∫Øc g·ªó l√† ngh·ªá thu·∫≠t ƒë√≤i h·ªèi s·ª± ki√™n nh·∫´n v√† t·ªâ m·ªâ...',
          },
        ],
      },
      type: 'TUTORIAL',
      tags: ['ch·∫°m kh·∫Øc', 'g·ªó', 'h∆∞·ªõng d·∫´n', 'c∆° b·∫£n'],
    },
    {
      title: 'B·ªô s∆∞u t·∫≠p √°o d√†i th√™u T·∫øt Nguy√™n ƒê√°n',
      summary: 'Gi·ªõi thi·ªáu c√°c m·∫´u √°o d√†i th√™u tay ƒë·ªôc quy·ªÅn cho d·ªãp T·∫øt.',
      content: {
        blocks: [
          {
            type: 'paragraph',
            content: 'T·∫øt Nguy√™n ƒê√°n l√† d·ªãp ƒë·ªÉ ph√°i ƒë·∫πp Vi·ªát khoe s·∫Øc trong t√† √°o d√†i...',
          },
        ],
      },
      type: 'PRODUCT_SHOWCASE',
      tags: ['√°o d√†i', 't·∫øt', 'th√™u tay', 'th·ªùi trang'],
    },
  ];

  for (let i = 0; i < postData.length; i++) {
    const author =
      i < 5
        ? artisans[i % artisans.length]!
        : allUsers[Math.floor(Math.random() * allUsers.length)]!;
    const postInfo = postData[i]!;

    const post = await prisma.post.create({
      data: {
        userId: author.id,
        title: postInfo.title,
        slug: generateSlug(postInfo.title),
        summary: postInfo.summary,
        content: postInfo.content,
        contentText: postInfo.content.blocks.map((b) => b.content || '').join(' '),
        type: postInfo.type,
        status: Math.random() > 0.2 ? 'PUBLISHED' : 'DRAFT',
        thumbnailUrl: `https://picsum.photos/seed/post-${i}/400/300`,
        coverImage: `https://picsum.photos/seed/post-${i}-cover/1200/600`,
        mediaUrls: generateProductImages(i, 2),
        tags: postInfo.tags,
        viewCount: Math.floor(Math.random() * 5000) + 100,
        likeCount: Math.floor(Math.random() * 500) + 10,
        commentCount: Math.floor(Math.random() * 100) + 5,
        shareCount: Math.floor(Math.random() * 50),
        publishedAt:
          Math.random() > 0.2
            ? new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000)
            : null,
      },
    });

    // T·∫°o PostAnalytics
    await prisma.postAnalytics.create({
      data: {
        postId: post.id,
        viewCount: post.viewCount,
        uniqueViewers: Math.floor(post.viewCount * 0.7),
        avgReadTime: 2.5 + Math.random() * 2,
        conversionCount: Math.floor(Math.random() * 20),
      },
    });

    posts.push(post);
  }

  return posts;
}

async function createFollows(users: UserData[]) {
  interface FollowRecord {
    followerId: string;
    followingId: string;
  }

  const follows: FollowRecord[] = [];

  // M·ªói user follow 2-5 users kh√°c
  for (const follower of users) {
    const followCount = Math.floor(Math.random() * 4) + 2;
    const otherUsers = users.filter((u) => u.id !== follower.id);

    for (let i = 0; i < followCount && i < otherUsers.length; i++) {
      const following = otherUsers[Math.floor(Math.random() * otherUsers.length)]!;

      // Ki·ªÉm tra ch∆∞a follow
      const exists = follows.some(
        (f) => f.followerId === follower.id && f.followingId === following.id,
      );

      if (!exists && following.id !== follower.id) {
        const follow = await prisma.follow.create({
          data: {
            followerId: follower.id,
            followingId: following.id,
            notifyNewPosts: Math.random() > 0.3,
          },
        });
        follows.push({ followerId: follow.followerId, followingId: follow.followingId });
      }
    }
  }
}

async function createLikesAndSavedPosts(users: UserData[], posts: any[]) {
  // Likes
  for (const user of users) {
    const likeCount = Math.floor(Math.random() * 10) + 5;
    const postsToLike = posts.sort(() => 0.5 - Math.random()).slice(0, likeCount);

    for (const post of postsToLike) {
      await prisma.like.create({
        data: {
          userId: user.id,
          postId: post.id,
          reaction: Math.random() > 0.9 ? 'love' : 'like',
        },
      });
    }
  }

  // Saved posts
  for (const user of users) {
    const saveCount = Math.floor(Math.random() * 5) + 2;
    const postsToSave = posts.sort(() => 0.5 - Math.random()).slice(0, saveCount);

    for (const post of postsToSave) {
      await prisma.savedPost.create({
        data: {
          userId: user.id,
          postId: post.id,
        },
      });
    }
  }
}

async function createComments(users: UserData[], posts: any[]) {
  const comments = [];

  const commentTexts = [
    'S·∫£n ph·∫©m r·∫•t ƒë·∫πp, t√¥i r·∫•t th√≠ch!',
    'Ngh·ªá nh√¢n l√†m r·∫•t t·ªâ m·ªâ v√† chuy√™n nghi·ªáp.',
    'Gi√° c·∫£ h·ª£p l√Ω, ch·∫•t l∆∞·ª£ng t·ªët.',
    'ƒê√£ mua v√† r·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m.',
    'C√≥ ship ra n∆∞·ªõc ngo√†i kh√¥ng ·∫°?',
    'M√¨nh mu·ªën ƒë·∫∑t v·ªõi s·ªë l∆∞·ª£ng l·ªõn th√¨ c√≥ gi·∫£m gi√° kh√¥ng?',
    'Th·ªùi gian giao h√†ng bao l√¢u v·∫≠y shop?',
    'S·∫£n ph·∫©m c√≥ b·∫£o h√†nh kh√¥ng ·∫°?',
    'R·∫•t ·∫•n t∆∞·ª£ng v·ªõi ch·∫•t l∆∞·ª£ng!',
    'ƒê√≥ng g√≥i c·∫©n th·∫≠n, giao h√†ng nhanh.',
    'M√¨nh ƒë√£ gi·ªõi thi·ªáu cho b·∫°n b√® r·ªìi.',
    'C√≥ th·ªÉ custom theo y√™u c·∫ßu kh√¥ng?',
    'M√†u s·∫Øc c√≥ ƒë√∫ng nh∆∞ h√¨nh kh√¥ng ·∫°?',
    'Shop c√≥ showroom ƒë·ªÉ xem tr·ª±c ti·∫øp kh√¥ng?',
    'Ch·∫•t li·ªáu c√≥ b·ªÅn kh√¥ng shop?',
  ];

  for (const post of posts.slice(0, 10)) {
    const commentCount = Math.floor(Math.random() * 5) + 3;

    for (let i = 0; i < commentCount; i++) {
      const commenter = users[Math.floor(Math.random() * users.length)]!;
      const commentText = commentTexts[Math.floor(Math.random() * commentTexts.length)]!;
      const comment = await prisma.comment.create({
        data: {
          postId: post.id,
          userId: commenter.id,
          content: commentText,
          likeCount: Math.floor(Math.random() * 20),
        },
      });

      comments.push(comment);

      // T·∫°o replies
      if (Math.random() > 0.5) {
        const replyCount = Math.floor(Math.random() * 3) + 1;
        for (let j = 0; j < replyCount; j++) {
          const replier = users[Math.floor(Math.random() * users.length)]!;
          const replyText = commentTexts[Math.floor(Math.random() * commentTexts.length)]!;
          await prisma.comment.create({
            data: {
              postId: post.id,
              userId: replier.id,
              parentId: comment.id,
              content: replyText,
              likeCount: Math.floor(Math.random() * 10),
            },
          });
        }
      }
    }
  }
}

async function createReviews(users: UserData[], products: any[]) {
  const customers = users.filter((u) => u.role === 'CUSTOMER');

  const reviewTexts = [
    {
      rating: 5,
      title: 'S·∫£n ph·∫©m tuy·ªát v·ªùi!',
      comment: 'Ch·∫•t l∆∞·ª£ng v∆∞·ª£t mong ƒë·ª£i, ƒë√≥ng g√≥i c·∫©n th·∫≠n. S·∫Ω ·ªßng h·ªô shop d√†i d√†i.',
    },
    {
      rating: 5,
      title: 'R·∫•t h√†i l√≤ng',
      comment: 'S·∫£n ph·∫©m ƒë√∫ng nh∆∞ m√¥ t·∫£, ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ h·ª£p l√Ω.',
    },
    {
      rating: 4,
      title: 'T·ªët nh∆∞ng c·∫ßn c·∫£i thi·ªán',
      comment: 'S·∫£n ph·∫©m ƒë·∫πp, ch·∫•t l∆∞·ª£ng ·ªïn. Tuy nhi√™n th·ªùi gian giao h√†ng h∆°i l√¢u.',
    },
    {
      rating: 4,
      title: 'ƒê√°ng mua',
      comment: 'S·∫£n ph·∫©m ƒë·∫πp, ph√π h·ª£p v·ªõi gi√° ti·ªÅn. Shop ph·ª•c v·ª• nhi·ªát t√¨nh.',
    },
    {
      rating: 5,
      title: 'Xu·∫•t s·∫Øc!',
      comment: 'ƒê√¢y l√† l·∫ßn th·ª© 3 m√¨nh mua h√†ng c·ªßa shop. Lu√¥n h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng.',
    },
    {
      rating: 3,
      title: 'T·∫°m ·ªïn',
      comment: 'S·∫£n ph·∫©m ·ªïn nh∆∞ng m√†u s·∫Øc h∆°i kh√°c so v·ªõi h√¨nh ·∫£nh.',
    },
    {
      rating: 5,
      title: 'Qu√° tuy·ªát v·ªùi',
      comment: 'Mua l√†m qu√† t·∫∑ng, ng∆∞·ªùi nh·∫≠n r·∫•t th√≠ch. C·∫£m ∆°n shop!',
    },
    {
      rating: 4,
      title: 'Ch·∫•t l∆∞·ª£ng t·ªët',
      comment: 'S·∫£n ph·∫©m l√†m th·ªß c√¥ng r·∫•t tinh x·∫£o, ƒë√°ng ƒë·ªìng ti·ªÅn b√°t g·∫°o.',
    },
    {
      rating: 5,
      title: 'S·∫Ω quay l·∫°i',
      comment: 'Shop t∆∞ v·∫•n nhi·ªát t√¨nh, s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng. Ch·∫Øc ch·∫Øn s·∫Ω mua l·∫°i.',
    },
    {
      rating: 5,
      title: 'Ho√†n h·∫£o',
      comment: 'Kh√¥ng c√≥ g√¨ ƒë·ªÉ ch√™, t·ª´ s·∫£n ph·∫©m ƒë·∫øn d·ªãch v·ª• ƒë·ªÅu tuy·ªát v·ªùi.',
    },
  ];

  for (const product of products) {
    const reviewCount = Math.floor(Math.random() * 5) + 2;
    const reviewers = customers.sort(() => 0.5 - Math.random()).slice(0, reviewCount);

    for (const reviewer of reviewers) {
      const reviewData = reviewTexts[Math.floor(Math.random() * reviewTexts.length)]!;
      await prisma.review.create({
        data: {
          userId: reviewer.id,
          productId: product.id,
          rating: reviewData.rating,
          title: reviewData.title,
          comment: reviewData.comment,
          images: Math.random() > 0.7 ? generateProductImages(product.id, 2) : [],
        },
      });
    }
  }
}

async function createCartItems(users: UserData[], products: any[]) {
  const customers = users.filter((u) => u.role === 'CUSTOMER');

  for (const customer of customers) {
    const cartItemCount = Math.floor(Math.random() * 3) + 1;
    const productsInCart = products.sort(() => 0.5 - Math.random()).slice(0, cartItemCount);

    for (const product of productsInCart) {
      await prisma.cartItem.create({
        data: {
          userId: customer.id,
          productId: product.id,
          quantity: Math.floor(Math.random() * 3) + 1,
          price: product.discountPrice || product.price,
        },
      });
    }
  }
}

async function createOrders(users: UserData[], products: any[]) {
  const customers = users.filter((u) => u.role === 'CUSTOMER');
  const orders = [];

  for (const customer of customers.slice(0, 8)) {
    // L·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh c·ªßa customer
    const profile = await prisma.profile.findUnique({
      where: { userId: customer.id },
      include: { addresses: { where: { isDefault: true } } },
    });

    const orderCount = Math.floor(Math.random() * 3) + 1;

    for (let i = 0; i < orderCount; i++) {
      const orderProducts = products
        .sort(() => 0.5 - Math.random())
        .slice(0, Math.floor(Math.random() * 3) + 1);
      const orderItems = orderProducts.map((p: any) => ({
        productId: p.id,
        sellerId: p.sellerId,
        quantity: Math.floor(Math.random() * 2) + 1,
        price: p.discountPrice || p.price,
      }));

      const subtotal = orderItems.reduce(
        (sum, item) => sum + Number(item.price) * item.quantity,
        0,
      );
      const shippingCost = 30000;

      const order = await prisma.order.create({
        data: {
          orderNumber: generateOrderNumber(),
          userId: customer.id,
          addressId: profile?.addresses[0]?.id || null,
          status: getRandomOrderStatus(),
          paymentStatus: getRandomPaymentStatus(),
          totalAmount: subtotal + shippingCost,
          subtotal: subtotal,
          shippingCost: shippingCost,
          paymentMethod: getRandomPaymentMethod(),
          notes: Math.random() > 0.7 ? 'Giao gi·ªù h√†nh ch√≠nh, g·ªçi tr∆∞·ªõc khi giao' : null,
          trackingNumber: Math.random() > 0.5 ? generateTrackingNumber() : null,
          estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
          deliveredAt:
            Math.random() > 0.7
              ? new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000)
              : null,
          items: {
            create: orderItems,
          },
        },
      });

      orders.push(order);
    }
  }

  return orders;
}

async function createQuoteRequests(users: UserData[], products: any[]) {
  const customers = users.filter((u) => u.role === 'CUSTOMER');
  const customizableProducts = products.filter((p: any) => p.isCustomizable);

  const quoteMessages = [
    {
      customer: 'T√¥i mu·ªën ƒë·∫∑t 50 chi·∫øc v·ªõi logo c√¥ng ty, c√≥ ƒë∆∞·ª£c kh√¥ng?',
      artisan: 'D·∫° ƒë∆∞·ª£c ·∫°, v·ªõi s·ªë l∆∞·ª£ng 50 chi·∫øc em b√°o gi√° ... ƒë·ªìng/chi·∫øc ƒë√£ bao g·ªìm kh·∫Øc logo.',
      specifications: 'S·ªë l∆∞·ª£ng: 50 chi·∫øc\nY√™u c·∫ßu: Kh·∫Øc logo c√¥ng ty',
    },
    {
      customer: 'C√≥ th·ªÉ l√†m k√≠ch th∆∞·ªõc 1m2 ƒë∆∞·ª£c kh√¥ng? T√¥i c·∫ßn trang tr√≠ s·∫£nh kh√°ch s·∫°n.',
      artisan: 'Ch√∫ng t√¥i c√≥ th·ªÉ l√†m k√≠ch th∆∞·ªõc theo y√™u c·∫ßu. V·ªõi k√≠ch th∆∞·ªõc 1m2, gi√° s·∫Ω l√† ...',
      specifications: 'K√≠ch th∆∞·ªõc: 1m x 1m\nM·ª•c ƒë√≠ch: Trang tr√≠ s·∫£nh kh√°ch s·∫°n',
    },
    {
      customer: 'T√¥i mu·ªën thay ƒë·ªïi m√†u s·∫Øc theo phong th·ªßy, c√≥ t∆∞ v·∫•n ƒë∆∞·ª£c kh√¥ng?',
      artisan:
        'D·∫°, ch√∫ng t√¥i c√≥ th·ªÉ t∆∞ v·∫•n v√† l√†m theo m√†u s·∫Øc phong th·ªßy ph√π h·ª£p v·ªõi tu·ªïi v√† m·ªánh c·ªßa qu√Ω kh√°ch.',
      specifications: 'Y√™u c·∫ßu: M√†u s·∫Øc theo phong th·ªßy\nC·∫ßn t∆∞ v·∫•n ch·ªçn m√†u',
    },
  ];

  const maxItems = Math.min(10, customizableProducts.length);

  for (let i = 0; i < maxItems; i++) {
    const customer = customers[i % customers.length]!;
    const product = customizableProducts[i % customizableProducts.length]!;
    const quoteData = quoteMessages[i % quoteMessages.length]!;

    const quote = await prisma.quoteRequest.create({
      data: {
        productId: product.id,
        customerId: customer.id,
        artisanId: product.sellerId,
        requestedPrice: Number(product.price) * 0.9,
        specifications: quoteData.specifications,
        status: getRandomQuoteStatus(),
        counterOffer: Math.random() > 0.5 ? Number(product.price) * 0.95 : null,
        finalPrice: Math.random() > 0.7 ? Number(product.price) * 0.93 : null,
        customerMessage: quoteData.customer,
        artisanMessage: Math.random() > 0.3 ? quoteData.artisan : null,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      },
    });

    // T·∫°o negotiation history
    await prisma.quoteNegotiation.create({
      data: {
        quoteId: quote.id,
        action: 'REQUEST',
        actor: 'customer',
        newPrice: quote.requestedPrice,
        message: quote.customerMessage,
      },
    });

    if (quote.artisanMessage) {
      await prisma.quoteNegotiation.create({
        data: {
          quoteId: quote.id,
          action: quote.counterOffer ? 'COUNTER' : 'MESSAGE',
          actor: 'artisan',
          previousPrice: quote.requestedPrice,
          newPrice: quote.counterOffer,
          message: quote.artisanMessage,
        },
      });
    }
  }
}

async function createMessages(users: UserData[]) {
  const messageTemplates = [
    {
      type: 'TEXT' as const,
      content: 'Ch√†o shop, s·∫£n ph·∫©m n√†y c√≤n h√†ng kh√¥ng ·∫°?',
    },
    {
      type: 'TEXT' as const,
      content: 'D·∫° c√≤n h√†ng ·∫°. Anh/ch·ªã c·∫ßn t∆∞ v·∫•n g√¨ th√™m kh√¥ng ·∫°?',
    },
    {
      type: 'TEXT' as const,
      content: 'Shop c√≥ th·ªÉ l√†m theo y√™u c·∫ßu ri√™ng kh√¥ng?',
    },
    {
      type: 'TEXT' as const,
      content: 'D·∫° ƒë∆∞·ª£c ·∫°, anh/ch·ªã cho em bi·∫øt y√™u c·∫ßu c·ª• th·ªÉ ƒë·ªÉ em b√°o gi√°.',
    },
    {
      type: 'TEXT' as const,
      content: 'Giao h√†ng trong bao l√¢u v·∫≠y shop?',
    },
    {
      type: 'TEXT' as const,
      content: 'D·∫°, n·∫øu c√≥ s·∫µn th√¨ 2-3 ng√†y, ƒë·∫∑t l√†m th√¨ 7-10 ng√†y ·∫°.',
    },
    {
      type: 'IMAGE' as const,
      content: 'ƒê√¢y l√† m·∫´u em v·ª´a l√†m xong, anh ch·ªã xem th·ª≠.',
    },
    {
      type: 'QUOTE_DISCUSSION' as const,
      content: 'Em g·ª≠i b√°o gi√° chi ti·∫øt cho ƒë∆°n h√†ng c·ªßa anh/ch·ªã.',
    },
    {
      type: 'TEXT' as const,
      content: 'C·∫£m ∆°n shop, ƒë·ªÉ m√¨nh suy nghƒ© th√™m.',
    },
    {
      type: 'TEXT' as const,
      content: 'D·∫°, anh/ch·ªã c·ª© suy nghƒ© k·ªπ, c√≥ g√¨ c·ª© li√™n h·ªá em ·∫°.',
    },
  ];

  // T·∫°o conversations gi·ªØa customers v√† artisans
  const customers = users.filter((u) => u.role === 'CUSTOMER');
  const artisans = users.filter((u) => u.role === 'ARTISAN');

  for (let i = 0; i < 20; i++) {
    const customer = customers[i % customers.length]!;
    const artisan = artisans[i % artisans.length]!;
    const isCustomerFirst = Math.random() > 0.5;

    const sender = isCustomerFirst ? customer : artisan;
    const receiver = isCustomerFirst ? artisan : customer;

    const messageData = messageTemplates[i % messageTemplates.length]!;

    // S·ª≠ d·ª•ng conditional object creation
    const messageCreateData: any = {
      senderId: sender.id,
      receiverId: receiver.id,
      content: messageData.content,
      type: messageData.type,
      isRead: Math.random() > 0.3,
    };

    // Ch·ªâ th√™m metadata n·∫øu c·∫ßn thi·∫øt
    if (messageData.type === 'IMAGE') {
      messageCreateData.metadata = { url: `https://picsum.photos/seed/msg-${i}/400/300` };
    }

    await prisma.message.create({
      data: messageCreateData,
    });
  }
}

async function createNotifications(users: UserData[]) {
  const notificationTemplates = [
    {
      type: 'LIKE' as const,
      title: 'B√†i vi·∫øt c·ªßa b·∫°n ƒë∆∞·ª£c th√≠ch',
      message: '{sender} ƒë√£ th√≠ch b√†i vi·∫øt "{postTitle}"',
    },
    {
      type: 'COMMENT' as const,
      title: 'B√¨nh lu·∫≠n m·ªõi',
      message: '{sender} ƒë√£ b√¨nh lu·∫≠n v·ªÅ b√†i vi·∫øt c·ªßa b·∫°n',
    },
    {
      type: 'FOLLOW' as const,
      title: 'Ng∆∞·ªùi theo d√µi m·ªõi',
      message: '{sender} ƒë√£ b·∫Øt ƒë·∫ßu theo d√µi b·∫°n',
    },
    {
      type: 'ORDER_UPDATE' as const,
      title: 'C·∫≠p nh·∫≠t ƒë∆°n h√†ng',
      message: 'ƒê∆°n h√†ng #{orderNumber} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c {status}',
    },
    {
      type: 'QUOTE_REQUEST' as const,
      title: 'Y√™u c·∫ßu b√°o gi√° m·ªõi',
      message: '{sender} ƒë√£ g·ª≠i y√™u c·∫ßu b√°o gi√° cho s·∫£n ph·∫©m c·ªßa b·∫°n',
    },
    {
      type: 'MESSAGE' as const,
      title: 'Tin nh·∫Øn m·ªõi',
      message: '{sender} ƒë√£ g·ª≠i tin nh·∫Øn cho b·∫°n',
    },
    {
      type: 'PAYMENT_SUCCESS' as const,
      title: 'Thanh to√°n th√†nh c√¥ng',
      message: 'Thanh to√°n cho ƒë∆°n h√†ng #{orderNumber} ƒë√£ th√†nh c√¥ng',
    },
    {
      type: 'SYSTEM' as const,
      title: 'Th√¥ng b√°o h·ªá th·ªëng',
      message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng',
    },
  ];

  for (const user of users) {
    const notificationCount = Math.floor(Math.random() * 5) + 3;

    for (let i = 0; i < notificationCount; i++) {
      const template =
        notificationTemplates[Math.floor(Math.random() * notificationTemplates.length)]!;
      const otherUsers = users.filter((u) => u.id !== user.id);
      const sender = otherUsers[Math.floor(Math.random() * otherUsers.length)]!;

      let message = template.message;
      let data: any = {};

      switch (template.type) {
        case 'LIKE':
        case 'COMMENT':
          message = message.replace('{sender}', `${sender.firstName} ${sender.lastName}`);
          message = message.replace('{postTitle}', 'Quy tr√¨nh l√†m g·ªëm s·ª© B√°t Tr√†ng');
          data = { postId: 'some-post-id' };
          break;
        case 'FOLLOW':
        case 'QUOTE_REQUEST':
        case 'MESSAGE':
          message = message.replace('{sender}', `${sender.firstName} ${sender.lastName}`);
          data = { senderId: sender.id };
          break;
        case 'ORDER_UPDATE':
        case 'PAYMENT_SUCCESS':
          message = message.replace('{orderNumber}', generateOrderNumber());
          message = message.replace('{status}', 'x√°c nh·∫≠n');
          data = { orderId: 'some-order-id' };
          break;
      }

      await prisma.notification.create({
        data: {
          recipientId: user.id,
          senderId: template.type === 'SYSTEM' ? null : sender.id,
          type: template.type,
          title: template.title,
          message,
          data,
          isRead: Math.random() > 0.6,
        },
      });
    }
  }
}

// Helper functions
function getRandomLocation(): string {
  const locations = [
    'H√† N·ªôi',
    'TP. H·ªì Ch√≠ Minh',
    'ƒê√† N·∫µng',
    'Hu·∫ø',
    'H·ªôi An',
    'Nha Trang',
    'ƒê√† L·∫°t',
    'C·∫ßn Th∆°',
    'H·∫£i Ph√≤ng',
    'Qu·∫£ng Ninh',
  ];
  return locations[Math.floor(Math.random() * locations.length)]!;
}

function generatePhoneNumber(): string {
  const prefixes = ['090', '091', '092', '093', '094', '096', '097', '098', '086', '088'];
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)]!;
  const number = Math.floor(Math.random() * 10000000)
    .toString()
    .padStart(7, '0');
  return prefix + number;
}

function generateAddress(): {
  street: string;
  city: string;
  state: string;
  zipCode: string;
  country: string;
} {
  const streets = [
    'Nguy·ªÖn Hu·ªá',
    'L√™ L·ª£i',
    'Tr·∫ßn H∆∞ng ƒê·∫°o',
    'Nguy·ªÖn Tr√£i',
    'L√Ω Th∆∞·ªùng Ki·ªát',
    'Hai B√† Tr∆∞ng',
    'Nguy·ªÖn VƒÉn C·ª´',
    'V√µ VƒÉn T·∫ßn',
    'Phan Chu Trinh',
    'ƒêi·ªán Bi√™n Ph·ªß',
  ];

  const districts = [
    { city: 'H√† N·ªôi', districts: ['Ho√†n Ki·∫øm', 'Ba ƒê√¨nh', 'ƒê·ªëng ƒêa', 'Hai B√† Tr∆∞ng', 'C·∫ßu Gi·∫•y'] },
    { city: 'TP. H·ªì Ch√≠ Minh', districts: ['Qu·∫≠n 1', 'Qu·∫≠n 3', 'Qu·∫≠n 5', 'Qu·∫≠n 7', 'B√¨nh Th·∫°nh'] },
    {
      city: 'ƒê√† N·∫µng',
      districts: ['H·∫£i Ch√¢u', 'Thanh Kh√™', 'S∆°n Tr√†', 'Ng≈© H√†nh S∆°n', 'Li√™n Chi·ªÉu'],
    },
  ];

  const cityData = districts[Math.floor(Math.random() * districts.length)]!;
  const district = cityData.districts[Math.floor(Math.random() * cityData.districts.length)]!;

  return {
    street: `${Math.floor(Math.random() * 200) + 1} ${streets[Math.floor(Math.random() * streets.length)]!}`,
    city: cityData.city,
    state: district,
    zipCode: (100000 + Math.floor(Math.random() * 900000)).toString(),
    country: 'Vi·ªát Nam',
  };
}

function generateSlug(text: string): string {
  const from = '√†√°√§√¢√£√•ƒÉ√¶√ß√®√©√´√™√¨√≠√Ø√Æ√≤√≥√∂√¥√µ√∏√π√∫√º√ª√±≈Ñ√±≈°≈æƒë√∞√ü√ø√Ω√Ä√Å√Ñ√Ç√É√ÖƒÇ√Ü√á√à√â√ã√ä√å√ç√è√é√í√ì√ñ√î√ï√ò√ô√ö√ú√õ√ë≈É√ë≈†≈Ωƒê√ê√ü√ø√ù';
  const to = 'aaaaaaaaaceeeeiiiiooooooouuuunnnszddsyyAAAAAAAACEEEEIIIIOOOOOOOUUUUNNNSZDDsyY';

  let slug = text.toLowerCase();

  for (let i = 0; i < from.length; i++) {
    slug = slug.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
  }

  return slug
    .replace(/[^a-z0-9 -]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-+/, '')
    .replace(/-+$/, '');
}

function generateProductImages(seed: any, count: number): string[] {
  const images = [];
  for (let i = 0; i < count; i++) {
    images.push(`https://picsum.photos/seed/${seed}-${i}/800/600`);
  }
  return images;
}

function generateOrderNumber(): string {
  const date = new Date();
  const year = date.getFullYear().toString().slice(-2);
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const random = Math.floor(Math.random() * 10000)
    .toString()
    .padStart(4, '0');
  return `ORD${year}${month}${random}`;
}

function generateTrackingNumber(): string {
  const carriers = ['VNP', 'GHN', 'JT', 'SPX'];
  const carrier = carriers[Math.floor(Math.random() * carriers.length)]!;
  const number = Math.floor(Math.random() * 1000000000)
    .toString()
    .padStart(9, '0');
  return `${carrier}${number}`;
}

function getRandomOrderStatus(): any {
  const statuses = ['PENDING', 'CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'];
  return statuses[Math.floor(Math.random() * statuses.length)]!;
}

function getRandomPaymentStatus(): any {
  const statuses = ['PENDING', 'COMPLETED', 'FAILED'];
  return statuses[Math.floor(Math.random() * statuses.length)]!;
}

function getRandomPaymentMethod(): any {
  const methods = ['BANK_TRANSFER', 'CASH_ON_DELIVERY', 'DIGITAL_WALLET'];
  return methods[Math.floor(Math.random() * methods.length)]!;
}

function getRandomQuoteStatus(): any {
  const statuses = ['PENDING', 'ACCEPTED', 'REJECTED', 'COUNTER_OFFERED'];
  return statuses[Math.floor(Math.random() * statuses.length)]!;
}

// Run seeding
main()
  .catch((e) => {
    console.error('‚ùå L·ªói khi seed database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
