generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRole {
  ADMIN
  ARTISAN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum UpgradeRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PostType {
  STORY
  TUTORIAL
  PRODUCT_SHOWCASE
  BEHIND_THE_SCENES
  EVENT
  GENERAL
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum AttributeType {
  TEXT
  NUMBER
  SELECT
  MULTI_SELECT
  BOOLEAN
  DATE
  URL
  EMAIL
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  OUT_OF_STOCK
  DELETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  CASH_ON_DELIVERY
}

enum DeliveryStatus {
  PREPARING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  DELIVERY_FAILED
  RETURNED
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTER_OFFERED
  EXPIRED
  COMPLETED
}

// Thương lượng giá cho sản phẩm có sẵn
enum NegotiationStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTER_OFFERED
  EXPIRED
  COMPLETED
}

enum DisputeType {
  PRODUCT_NOT_RECEIVED
  PRODUCT_DAMAGED
  PRODUCT_NOT_AS_DESCRIBED
  DELIVERY_ISSUE
  SELLER_ISSUE
  OTHER
}

enum DisputeStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  CLOSED
}

enum ReturnReason {
  DEFECTIVE
  NOT_AS_DESCRIBED
  WRONG_ITEM
  DAMAGED_IN_SHIPPING
  CHANGED_MIND
  OTHER
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  PRODUCT_RETURNED
  REFUND_PROCESSED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  CUSTOM_ORDER
  QUOTE_DISCUSSION
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  ORDER_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  QUOTE_REQUEST
  QUOTE_RESPONSE
  CUSTOM_ORDER
  CUSTOM_ORDER_UPDATE
  MESSAGE
  DISPUTE
  RETURN
  PRICE_NEGOTIATION
  SYSTEM
}

enum WishlistItemType {
  PRODUCT
  POST
}

// CORE USER & AUTH MODELS
model User {
  id             String     @id @default(uuid())
  email          String     @unique
  username       String     @unique
  password       String
  firstName      String
  lastName       String
  role           UserRole   @default(CUSTOMER)
  status         UserStatus @default(ACTIVE)
  bio            String?    @db.Text
  avatarUrl      String?
  isVerified     Boolean    @default(false)
  emailVerified  Boolean    @default(false)
  phone          String?
  lastSeenAt     DateTime?
  // CHỈ ARTISAN CÓ FOLLOWERS
  followerCount  Int        @default(0) // Chỉ cập nhật khi role = ARTISAN
  followingCount Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?

  // Auth relations
  profile            Profile?
  sessions           Session[]
  refreshTokens      RefreshToken[]
  passwordResets     PasswordReset[]
  emailVerifications EmailVerification[]

  // Social relations
  artisanProfile ArtisanProfile?
  upgradeRequest ArtisanUpgradeRequest?
  posts          Post[] // CHỈ ARTISAN POST
  followers      Follow[]               @relation("Following")
  following      Follow[]               @relation("Follower")
  likes          Like[]
  comments       Comment[]

  // E-commerce relations
  products     Product[] // CHỈ ARTISAN
  cartItems    CartItem[]
  orders       Order[]     @relation("CustomerOrders")
  sellerOrders OrderItem[] @relation("SellerOrderItems")

  // Negotiations & Quotes
  priceNegotiationsAsCustomer PriceNegotiation[] @relation("CustomerNegotiations")
  priceNegotiationsAsArtisan  PriceNegotiation[] @relation("ArtisanNegotiations")
  quoteRequestsAsCustomer     QuoteRequest[]     @relation("CustomerQuotes")
  quoteRequestsAsArtisan      QuoteRequest[]     @relation("ArtisanQuotes")

  reviews             Review[]
  wishlistItems       Wishlist[]
  paymentMethods      PaymentMethod[]
  paymentTransactions PaymentTransaction[]

  // Dispute & Return
  disputeComplaints OrderDispute[] @relation("DisputeComplainant")
  returnRequests    OrderReturn[]  @relation("ReturnRequester")

  // Communication
  sentMessages      Message[]      @relation("MessageSender")
  receivedMessages  Message[]      @relation("MessageReceiver")
  notifications     Notification[] @relation("NotificationRecipient")
  sentNotifications Notification[] @relation("NotificationSender")

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([status])
  @@index([deletedAt])
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  coverUrl    String?
  location    String?
  website     String?
  dateOfBirth DateTime?
  gender      String?
  socialLinks Json?
  preferences Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses Address[]

  @@index([userId])
}

model Address {
  id        String   @id @default(uuid())
  profileId String
  fullName  String
  phone     String?
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  orders  Order[] @relation("ShippingAddress")

  @@index([profileId])
}

// AUTH SUPPORTING MODELS
model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  userAgent  String?
  ipAddress  String?
  lastActive DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// ARTISAN MODELS
model ArtisanProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  shopName        String
  shopDescription String?  @db.Text
  shopLogoUrl     String?
  shopBannerUrl   String?
  specialties     String[]
  experience      Int?
  website         String?
  contactEmail    String?
  contactPhone    String?
  socialMedia     Json?
  businessAddress String?
  businessHours   Json?
  shippingInfo    Json?
  returnPolicy    String?  @db.Text
  isVerified      Boolean  @default(false)
  rating          Float?
  reviewCount     Int      @default(0)
  totalSales      Decimal  @default(0) @db.Decimal(12, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([shopName])
  @@index([isVerified])
  @@index([rating])
}

model ArtisanUpgradeRequest {
  id              String               @id @default(uuid())
  userId          String               @unique
  shopName        String
  shopDescription String?              @db.Text
  specialties     String[]
  experience      Int?
  website         String?
  socialMedia     Json?
  reason          String?              @db.Text
  images          String[]
  certificates    String[]
  identityProof   String?
  status          UpgradeRequestStatus @default(PENDING)
  adminNotes      String?              @db.Text
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
}

// SOCIAL MODELS
model Follow {
  id             String   @id @default(uuid())
  followerId     String
  followingId    String
  notifyNewPosts Boolean  @default(true)
  createdAt      DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id           String     @id @default(uuid())
  userId       String
  title        String
  slug         String?    @unique
  summary      String?    @db.Text
  content      Json
  contentText  String?    @db.Text
  type         PostType   @default(GENERAL)
  status       PostStatus @default(DRAFT)
  thumbnailUrl String?
  coverImage   String?
  mediaUrls    String[]
  tags         String[]
  viewCount    Int        @default(0)
  likeCount    Int        @default(0)
  commentCount Int        @default(0)
  shareCount   Int        @default(0)
  publishedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes           Like[]
  comments        Comment[]
  wishlistItems   Wishlist[]
  productMentions PostProductMention[]

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([publishedAt])
  @@index([deletedAt])
  @@index([tags])
}

// Junction table for Post-Product mentions
model PostProductMention {
  id          String  @id @default(uuid())
  postId      String
  productId   String
  contextText String? @db.Text
  position    Int?

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([postId, productId])
  @@index([postId])
  @@index([productId])
}

model Comment {
  id         String    @id @default(uuid())
  postId     String
  userId     String
  parentId   String?
  content    String    @db.Text
  mediaUrl   String?
  likeCount  Int       @default(0)
  replyCount Int       @default(0)
  isEdited   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies Comment[] @relation("CommentReplies")
  likes   Like[]    @relation("CommentLikes")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([deletedAt])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  reaction  String   @default("like")
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
}

model Wishlist {
  id        String           @id @default(uuid())
  userId    String
  itemType  WishlistItemType
  productId String?
  postId    String?
  createdAt DateTime         @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([userId, postId])
  @@index([userId])
  @@index([itemType])
}

// PRODUCT MODELS
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?
  parentId    String?
  level       Int      @default(0)
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent             Category?                   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children           Category[]                  @relation("CategoryHierarchy")
  attributeTemplates CategoryAttributeTemplate[]
  products           CategoryProduct[]

  @@index([parentId])
  @@index([level])
  @@index([isActive])
}

model CategoryAttributeTemplate {
  id          String        @id @default(uuid())
  categoryId  String
  name        String
  key         String
  type        AttributeType
  isRequired  Boolean       @default(false)
  isVariant   Boolean       @default(false)
  options     Json?
  unit        String?
  sortOrder   Int           @default(0)
  description String?
  isCustom    Boolean       @default(false)
  createdBy   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, key])
  @@index([categoryId])
  @@index([isVariant])
  @@index([isCustom])
}

// Junction table for Product-Category many-to-many
model CategoryProduct {
  categoryId String
  productId  String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([categoryId, productId])
  @@index([categoryId])
  @@index([productId])
}

model Product {
  id               String        @id @default(uuid())
  sellerId         String
  name             String
  slug             String?       @unique
  description      String?       @db.Text
  price            Decimal       @db.Decimal(10, 2)
  discountPrice    Decimal?      @db.Decimal(10, 2)
  quantity         Int           @default(0)
  minOrderQty      Int           @default(1)
  maxOrderQty      Int?
  sku              String?       @unique
  barcode          String?
  weight           Float?
  dimensions       Json?
  allowNegotiation Boolean       @default(true)
  shippingInfo     Json?
  status           ProductStatus @default(DRAFT)
  tags             String[]
  images           String[]
  featuredImage    String?
  seoTitle         String?
  seoDescription   String?
  attributes       Json?
  specifications   Json?
  customFields     Json?
  hasVariants      Boolean       @default(false)
  viewCount        Int           @default(0)
  salesCount       Int           @default(0)
  avgRating        Float?
  reviewCount      Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?

  seller             User                 @relation(fields: [sellerId], references: [id])
  categories         CategoryProduct[]
  variants           ProductVariant[]
  priceHistory       PriceHistory[]
  reviews            Review[]
  cartItems          CartItem[]
  orderItems         OrderItem[]
  priceNegotiations  PriceNegotiation[]
  quoteRequestsAsRef QuoteRequest[]       @relation("ReferenceProduct")
  wishlistItems      Wishlist[]
  postMentions       PostProductMention[]

  @@index([sellerId])
  @@index([status])
  @@index([avgRating])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([tags])
  @@index([allowNegotiation])
}

model ProductVariant {
  id            String   @id @default(uuid())
  productId     String
  sku           String   @unique
  name          String?
  price         Decimal  @db.Decimal(10, 2)
  discountPrice Decimal? @db.Decimal(10, 2)
  quantity      Int      @default(0)
  images        String[]
  weight        Float?
  dimensions    Json?
  attributes    Json
  isActive      Boolean  @default(true)
  isDefault     Boolean  @default(false)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product          Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems        CartItem[]         @relation("VariantCartItems")
  orderItems       OrderItem[]        @relation("VariantOrderItems")
  PriceNegotiation PriceNegotiation[] @relation("VariantNegotiations")

  @@index([productId])
  @@index([sku])
  @@index([isActive])
}

model PriceHistory {
  id         String   @id @default(uuid())
  productId  String
  price      Decimal  @db.Decimal(10, 2)
  changeNote String?
  changedBy  String?
  createdAt  DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([createdAt])
}

// NEGOTIATION & QUOTE MODELS
model PriceNegotiation {
  id                 String            @id @default(uuid())
  productId          String
  variantId          String?
  customerId         String
  artisanId          String
  originalPrice      Decimal           @db.Decimal(10, 2)
  proposedPrice      Decimal           @db.Decimal(10, 2)
  finalPrice         Decimal?          @db.Decimal(10, 2)
  quantity           Int               @default(1)
  customerReason     String?           @db.Text
  status             NegotiationStatus @default(PENDING)
  artisanResponse    String?           @db.Text
  negotiationHistory Json?
  expiresAt          DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation("VariantNegotiations", fields: [variantId], references: [id])
  customer  User            @relation("CustomerNegotiations", fields: [customerId], references: [id])
  artisan   User            @relation("ArtisanNegotiations", fields: [artisanId], references: [id])
  cartItems CartItem[]

  @@index([productId])
  @@index([customerId])
  @@index([artisanId])
  @@index([status])
}

model QuoteRequest {
  id                 String      @id @default(uuid())
  customerId         String
  artisanId          String
  title              String
  description        String      @db.Text
  referenceProductId String?
  specifications     Json?
  attachmentUrls     String[]
  estimatedPrice     Decimal?    @db.Decimal(10, 2)
  customerBudget     Decimal?    @db.Decimal(10, 2)
  timeline           String?
  status             QuoteStatus @default(PENDING)
  artisanResponse    Json?
  finalPrice         Decimal?    @db.Decimal(10, 2)
  negotiationHistory Json?
  expiresAt          DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  customer         User        @relation("CustomerQuotes", fields: [customerId], references: [id])
  artisan          User        @relation("ArtisanQuotes", fields: [artisanId], references: [id])
  referenceProduct Product?    @relation("ReferenceProduct", fields: [referenceProductId], references: [id])
  messages         Message[]
  orderItems       OrderItem[]

  @@index([customerId])
  @@index([artisanId])
  @@index([status])
}

// CART & ORDER MODELS
model CartItem {
  id            String   @id @default(uuid())
  userId        String
  productId     String
  variantId     String?
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  negotiationId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant     ProductVariant?   @relation("VariantCartItems", fields: [variantId], references: [id])
  negotiation PriceNegotiation? @relation(fields: [negotiationId], references: [id])

  @@unique([userId, productId, variantId])
  @@index([userId])
  @@index([negotiationId])
}

model Order {
  id                String             @id @default(uuid())
  orderNumber       String             @unique
  userId            String
  addressId         String?
  status            OrderStatus        @default(PENDING)
  paymentStatus     PaymentStatus      @default(PENDING)
  totalAmount       Decimal            @db.Decimal(10, 2)
  subtotal          Decimal            @db.Decimal(10, 2)
  shippingCost      Decimal            @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal?           @db.Decimal(10, 2)
  discountAmount    Decimal?           @db.Decimal(10, 2)
  paymentMethod     PaymentMethodType?
  paymentReference  String?
  deliveryStatus    DeliveryStatus     @default(PREPARING)
  expectedDelivery  DateTime?
  actualDelivery    DateTime?
  isDeliveryLate    Boolean            @default(false)
  deliveryNotes     String?            @db.Text
  trackingNumber    String?
  canReturn         Boolean            @default(true)
  returnDeadline    DateTime?
  hasDispute        Boolean            @default(false)
  isRated           Boolean            @default(false)
  buyerSatisfaction Int?
  notes             String?            @db.Text
  statusHistory     Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  customer            User                 @relation("CustomerOrders", fields: [userId], references: [id])
  shippingAddress     Address?             @relation("ShippingAddress", fields: [addressId], references: [id])
  items               OrderItem[]
  paymentTransactions PaymentTransaction[]
  disputes            OrderDispute[]
  returns             OrderReturn[]

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
  @@index([deliveryStatus])
}

model OrderItem {
  id                String   @id @default(uuid())
  orderId           String
  productId         String? // Make nullable for custom orders
  variantId         String?
  sellerId          String
  quantity          Int
  price             Decimal  @db.Decimal(10, 2)
  customOrderId     String? // Add reference to custom order
  isCustomOrder     Boolean  @default(false)
  customTitle       String? // Store custom product title
  customDescription String? // Store custom product description
  createdAt         DateTime @default(now())

  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product?        @relation(fields: [productId], references: [id]) // Make optional
  variant     ProductVariant? @relation("VariantOrderItems", fields: [variantId], references: [id])
  seller      User            @relation("SellerOrderItems", fields: [sellerId], references: [id])
  customOrder QuoteRequest?   @relation(fields: [customOrderId], references: [id])

  @@index([orderId])
  @@index([sellerId])
  @@index([customOrderId])
}

model OrderDispute {
  id            String        @id @default(uuid())
  orderId       String
  complainantId String
  type          DisputeType
  reason        String        @db.Text
  evidence      String[]
  status        DisputeStatus @default(OPEN)
  resolution    String?       @db.Text
  resolvedBy    String?
  resolvedAt    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  complainant User  @relation("DisputeComplainant", fields: [complainantId], references: [id])

  @@index([orderId])
  @@index([status])
}

model OrderReturn {
  id           String       @id @default(uuid())
  orderId      String
  requesterId  String
  reason       ReturnReason
  description  String?      @db.Text
  evidence     String[]
  status       ReturnStatus @default(REQUESTED)
  approvedBy   String?
  refundAmount Decimal?     @db.Decimal(10, 2)
  refundReason String?      @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  requester User  @relation("ReturnRequester", fields: [requesterId], references: [id])

  @@index([orderId])
  @@index([status])
}

// PAYMENT MODELS
model PaymentMethod {
  id           String            @id @default(uuid())
  userId       String
  type         PaymentMethodType
  isDefault    Boolean           @default(false)
  cardLast4    String?
  cardBrand    String?
  expiryMonth  Int?
  expiryYear   Int?
  holderName   String?
  bankName     String?
  accountLast4 String?
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions PaymentTransaction[]

  @@index([userId])
  @@index([isDefault])
}

model PaymentTransaction {
  id                String            @id @default(uuid())
  orderId           String
  userId            String
  paymentMethodId   String?
  amount            Decimal           @db.Decimal(10, 2)
  currency          String            @default("VND")
  status            PaymentStatus     @default(PENDING)
  paymentMethodType PaymentMethodType
  reference         String            @unique
  externalReference String?
  failureReason     String?
  metadata          Json?
  processedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([reference])
}

// REVIEW MODELS
model Review {
  id                 String   @id @default(uuid())
  userId             String
  productId          String
  rating             Int
  title              String?
  comment            String?  @db.Text
  images             String[]
  helpfulCount       Int      @default(0)
  isVerifiedPurchase Boolean  @default(false)
  orderItemId        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@index([createdAt])
  @@index([isVerifiedPurchase])
}

// MESSAGING MODELS
model Message {
  id              String      @id @default(uuid())
  senderId        String
  receiverId      String
  content         String      @db.Text
  type            MessageType @default(TEXT)
  attachments     String[]
  quoteRequestId  String?
  productMentions Json?
  isRead          Boolean     @default(false)
  readAt          DateTime?
  isEdited        Boolean     @default(false)
  editedAt        DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  sender       User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User          @relation("MessageReceiver", fields: [receiverId], references: [id])
  quoteRequest QuoteRequest? @relation(fields: [quoteRequestId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([isRead])
  @@index([quoteRequestId])
}

// NOTIFICATION MODELS
model Notification {
  id          String           @id @default(uuid())
  recipientId String
  senderId    String?
  type        NotificationType
  title       String
  message     String           @db.Text
  data        Json?
  actionUrl   String?
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())

  recipient User  @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender    User? @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([recipientId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}
