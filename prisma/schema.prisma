// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//------------- USER & AUTHENTICATION MODELS -------------//
enum UserRole {
  ADMIN
  ARTISAN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  username       String     @unique
  password       String
  firstName      String
  lastName       String
  role           UserRole   @default(CUSTOMER)
  status         UserStatus @default(ACTIVE)
  bio            String?    @db.Text
  avatarUrl      String?
  isVerified     Boolean    @default(false)
  emailVerified  Boolean    @default(false)
  phone          String?
  lastSeenAt     DateTime?
  followerCount  Int        @default(0)
  followingCount Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?

  // Relations
  profile            Profile?
  artisanProfile     ArtisanProfile?
  upgradeRequest     ArtisanUpgradeRequest?
  posts              Post[]
  products           Product[]
  followers          Follow[]               @relation("following")
  following          Follow[]               @relation("follower")
  likes              Like[]
  comments           Comment[]
  cartItems          CartItem[]
  orders             Order[]                @relation("CustomerOrders")
  sellerOrders       OrderItem[]            @relation("SellerOrderItems")
  reviews            Review[]
  quoteRequests      QuoteRequest[]         @relation("CustomerQuotes")
  artisanQuotes      QuoteRequest[]         @relation("ArtisanQuotes")
  sessions           Session[]
  refreshTokens      RefreshToken[]
  savedPosts         SavedPost[]
  activities         UserActivity[]
  passwordResets     PasswordReset[]
  emailVerifications EmailVerification[]
  ReviewHelpful      ReviewHelpful[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([status])
  @@index([lastSeenAt])
  @@index([deletedAt])
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  coverUrl    String?
  location    String?
  website     String?
  dateOfBirth DateTime?
  gender      String?
  socialLinks Json? // { instagram: "url", facebook: "url", etc. }
  preferences Json? // User preferences for the platform
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses Address[]
}

model Address {
  id        String   @id @default(uuid())
  profileId String
  fullName  String
  phone     String?
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  orders  Order[] @relation("ShippingAddress")

  @@index([profileId])
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  userAgent  String?
  ipAddress  String?
  lastActive DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

//------------- ARTISAN PROFILE MODELS -------------//
model ArtisanProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  shopName        String
  shopDescription String?  @db.Text
  shopLogoUrl     String?
  shopBannerUrl   String?
  specialties     String[]
  experience      Int? // Years of experience
  website         String?
  contactEmail    String?
  contactPhone    String?
  socialMedia     Json? // { instagram: "url", facebook: "url", etc. }
  templateId      String? // Reference to template used
  templateData    Json? // Data for rendering the template
  isVerified      Boolean  @default(false)
  rating          Float?
  reviewCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([shopName])
  @@index([isVerified])
}

enum UpgradeRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model ArtisanUpgradeRequest {
  id              String               @id @default(uuid())
  userId          String               @unique
  shopName        String
  shopDescription String?              @db.Text
  specialties     String[]
  experience      Int?
  website         String?
  socialMedia     Json?
  reason          String?              @db.Text
  status          UpgradeRequestStatus @default(PENDING)
  adminNotes      String?              @db.Text
  reviewedBy      String? // Admin user ID who reviewed this request
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
}

//------------- SOCIAL & CONTENT MODELS -------------//
model Follow {
  id             String   @id @default(uuid())
  followerId     String // Who is following
  followingId    String // Who is being followed
  status         String   @default("accepted") // "pending", "accepted" for private accounts
  notifyNewPosts Boolean  @default(true)
  createdAt      DateTime @default(now())

  // Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([status])
}

enum PostType {
  STORY // Detailed artisan journey
  TUTORIAL // How-to content
  PRODUCT_SHOWCASE // Featured product content
  BEHIND_THE_SCENES // Workshop/process content
  EVENT // Event announcements
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

model Post {
  id           String     @id @default(uuid())
  userId       String
  title        String
  slug         String?    @unique
  summary      String?    @db.Text
  content      Json // Structured content with blocks
  contentText  String?    @db.Text // Plain text extraction for search
  type         PostType   @default(STORY)
  status       PostStatus @default(DRAFT)
  thumbnailUrl String?
  coverImage   String?
  mediaUrls    String[] // Array of media URLs used in content
  templateId   String? // Blog template reference 
  templateData Json? // Template-specific data
  tags         String[]
  viewCount    Int        @default(0)
  likeCount    Int        @default(0)
  commentCount Int        @default(0)
  shareCount   Int        @default(0)
  publishedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes           Like[]
  comments        Comment[]
  productMentions ProductMention[]
  savedBy         SavedPost[]
  analytics       PostAnalytics?

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([publishedAt])
  @@index([createdAt])
  @@index([deletedAt])
}

model Comment {
  id         String    @id @default(uuid())
  postId     String
  userId     String
  parentId   String? // For nested comments
  content    String    @db.Text
  mediaUrl   String? // Optional media attachment
  likeCount  Int       @default(0)
  replyCount Int       @default(0)
  isEdited   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  // Relations
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies Comment[] @relation("CommentReplies")
  likes   Like[]    @relation("CommentLikes")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@index([deletedAt])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  reaction  String   @default("like") // For future emoji reactions
  createdAt DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
  @@index([createdAt])
}

model SavedPost {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

//------------- PRODUCT & E-COMMERCE MODELS -------------//
enum ProductStatus {
  DRAFT
  PUBLISHED
  OUT_OF_STOCK
  DISCONTINUED
  DELETED
}

model Product {
  id             String        @id @default(uuid())
  sellerId       String
  name           String
  slug           String?       @unique
  description    String?       @db.Text
  price          Decimal       @db.Decimal(10, 2)
  discountPrice  Decimal?      @db.Decimal(10, 2)
  quantity       Int           @default(0)
  sku            String?
  weight         Float?
  dimensions     Json? // { length, width, height }
  status         ProductStatus @default(DRAFT)
  images         String[]
  tags           String[]
  attributes     Json? // Flexible product attributes
  isCustomizable Boolean       @default(false)
  avgRating      Float?
  reviewCount    Int           @default(0)
  viewCount      Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  // Relations
  seller          User              @relation(fields: [sellerId], references: [id])
  categories      CategoryProduct[]
  priceHistory    PriceHistory[]
  reviews         Review[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  quoteRequests   QuoteRequest[]
  productMentions ProductMention[]

  @@index([sellerId])
  @@index([status])
  @@index([price])
  @@index([isCustomizable])
  @@index([createdAt])
  @@index([deletedAt])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?
  parentId    String?
  level       Int      @default(0) // For hierarchical navigation
  sortOrder   Int      @default(0) // For custom ordering
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[]        @relation("CategoryHierarchy")
  products CategoryProduct[]

  @@index([parentId])
  @@index([level])
  @@index([sortOrder])
}

model CategoryProduct {
  categoryId String
  productId  String

  // Relations
  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([categoryId, productId])
  @@index([categoryId])
  @@index([productId])
}

model PriceHistory {
  id         String   @id @default(uuid())
  productId  String
  price      Decimal  @db.Decimal(10, 2)
  changeNote String?
  changedBy  String // User ID who changed the price
  createdAt  DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([createdAt])
}

model ProductMention {
  id          String  @id @default(uuid())
  postId      String
  productId   String
  contextText String? @db.Text
  position    Int? // Position in the post

  // Relations
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([postId])
  @@index([productId])
}

model ReviewHelpful {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@index([userId])
}

model Review {
  id           String   @id @default(uuid())
  userId       String
  productId    String
  rating       Int // 1-5
  title        String?
  comment      String?  @db.Text
  images       String[]
  helpfulCount Int      @default(0) // Number of people who found this review helpful
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product      Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  helpfulMarks ReviewHelpful[]

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@index([createdAt])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTER_OFFERED
  COMPLETED
  EXPIRED
}

model QuoteRequest {
  id             String      @id @default(uuid())
  productId      String
  customerId     String
  artisanId      String
  requestedPrice Decimal?    @db.Decimal(10, 2)
  specifications String?     @db.Text
  status         QuoteStatus @default(PENDING)
  counterOffer   Decimal?    @db.Decimal(10, 2)
  finalPrice     Decimal?    @db.Decimal(10, 2)
  messages       Json? // Array of message objects
  expiresAt      DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer User    @relation("CustomerQuotes", fields: [customerId], references: [id], onDelete: Cascade)
  artisan  User    @relation("ArtisanQuotes", fields: [artisanId], references: [id])
  order    Order? // If this quote became an order

  @@index([productId])
  @@index([customerId])
  @@index([artisanId])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  CASH_ON_DELIVERY
}

model Order {
  id                String         @id @default(uuid())
  orderNumber       String         @unique // Human-readable order ID
  userId            String
  addressId         String? // Shipping address
  status            OrderStatus    @default(PENDING)
  totalAmount       Decimal        @db.Decimal(10, 2)
  subtotal          Decimal        @db.Decimal(10, 2)
  tax               Decimal        @default(0) @db.Decimal(10, 2)
  shippingCost      Decimal        @default(0) @db.Decimal(10, 2)
  discount          Decimal        @default(0) @db.Decimal(10, 2)
  paymentMethod     PaymentMethod?
  paymentStatus     Boolean        @default(false)
  paymentIntentId   String? // Payment processor reference
  quoteRequestId    String?        @unique // If order came from a quote
  notes             String?
  trackingNumber    String?
  trackingUrl       String?
  estimatedDelivery DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  customer        User                 @relation("CustomerOrders", fields: [userId], references: [id])
  shippingAddress Address?             @relation("ShippingAddress", fields: [addressId], references: [id])
  items           OrderItem[]
  quoteRequest    QuoteRequest?        @relation(fields: [quoteRequestId], references: [id])
  statusHistory   OrderStatusHistory[]

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@index([paymentStatus])
  @@index([quoteRequestId])
  @@index([createdAt])
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  sellerId    String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  productData Json? // Snapshot of product at time of order
  createdAt   DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  seller  User    @relation("SellerOrderItems", fields: [sellerId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([sellerId])
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  note      String?
  createdBy String? // User ID who changed the status
  createdAt DateTime    @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@index([createdAt])
}

//------------- ANALYTICS MODELS -------------//
model PostAnalytics {
  id              String   @id @default(uuid())
  postId          String   @unique
  viewCount       Int      @default(0)
  uniqueViewers   Int      @default(0)
  avgReadTime     Float? // Average reading time in seconds
  bounceRate      Float? // Percentage of people who leave quickly
  conversionCount Int      @default(0) // Number of conversions (purchases) from this post
  updatedAt       DateTime @updatedAt

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model UserActivity {
  id           String   @id @default(uuid())
  userId       String
  activityType String // login, view_product, add_to_cart, etc.
  entityId     String? // Related entity ID
  entityType   String? // Related entity type
  metadata     Json? // Additional activity data
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([activityType])
  @@index([entityId])
  @@index([createdAt])
}

//------------- SYSTEM SETTINGS -------------//
model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  updatedBy   String? // Admin user ID who updated this setting
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}
