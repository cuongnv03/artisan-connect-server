generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === ENUMS ===
enum UserRole {
  ADMIN
  ARTISAN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum UpgradeRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PostType {
  STORY
  TUTORIAL
  PRODUCT_SHOWCASE
  BEHIND_THE_SCENES
  EVENT
  GENERAL
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  OUT_OF_STOCK
  DELETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  CASH_ON_DELIVERY
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTER_OFFERED
  EXPIRED
}

enum MessageType {
  TEXT
  IMAGE
  CUSTOM_ORDER
  QUOTE_DISCUSSION
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  ORDER_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  QUOTE_REQUEST
  QUOTE_RESPONSE
  CUSTOM_ORDER
  MESSAGE
  SYSTEM
}

// === USER & AUTH MODELS ===
model User {
  id             String     @id @default(uuid())
  email          String     @unique
  username       String     @unique
  password       String
  firstName      String
  lastName       String
  role           UserRole   @default(CUSTOMER)
  status         UserStatus @default(ACTIVE)
  bio            String?    @db.Text
  avatarUrl      String?
  isVerified     Boolean    @default(false)
  emailVerified  Boolean    @default(false)
  phone          String?
  lastSeenAt     DateTime?
  followerCount  Int        @default(0)
  followingCount Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?

  // Auth relations
  profile            Profile?
  sessions           Session[]
  refreshTokens      RefreshToken[]
  passwordResets     PasswordReset[]
  emailVerifications EmailVerification[]

  // Social relations
  artisanProfile ArtisanProfile?
  upgradeRequest ArtisanUpgradeRequest?
  posts          Post[]
  followers      Follow[]               @relation("Following")
  following      Follow[]               @relation("Follower")
  likes          Like[]
  comments       Comment[]
  savedPosts     SavedPost[]

  // E-commerce relations
  products            Product[]
  cartItems           CartItem[]
  orders              Order[]              @relation("CustomerOrders")
  sellerOrders        OrderItem[]          @relation("SellerOrderItems")
  quoteRequests       QuoteRequest[]       @relation("CustomerQuotes")
  artisanQuotes       QuoteRequest[]       @relation("ArtisanQuotes")
  reviews             Review[]
  wishlistItems       Wishlist[]
  paymentMethods      PaymentMethod[]
  paymentTransactions PaymentTransaction[]

  // Communication relations
  sentMessages      Message[]      @relation("MessageSender")
  receivedMessages  Message[]      @relation("MessageReceiver")
  notifications     Notification[] @relation("NotificationRecipient")
  sentNotifications Notification[] @relation("NotificationSender")

  // Activity tracking
  activities UserActivity[]
  Payment    Payment[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([status])
  @@index([deletedAt])
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  coverUrl    String?
  location    String?
  website     String?
  dateOfBirth DateTime?
  gender      String?
  socialLinks Json?
  preferences Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses Address[]

  @@index([userId])
}

model Address {
  id        String   @id @default(uuid())
  profileId String
  fullName  String
  phone     String?
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  orders  Order[] @relation("ShippingAddress")

  @@index([profileId])
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  userAgent  String?
  ipAddress  String?
  lastActive DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// === ARTISAN MODELS ===
model ArtisanProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  shopName        String
  shopDescription String?  @db.Text
  shopLogoUrl     String?
  shopBannerUrl   String?
  specialties     String[]
  experience      Int?
  website         String?
  contactEmail    String?
  contactPhone    String?
  socialMedia     Json?
  isVerified      Boolean  @default(false)
  rating          Float?
  reviewCount     Int      @default(0)
  totalSales      Decimal  @default(0) @db.Decimal(12, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([shopName])
  @@index([isVerified])
  @@index([rating])
}

model ArtisanUpgradeRequest {
  id              String               @id @default(uuid())
  userId          String               @unique
  shopName        String
  shopDescription String?              @db.Text
  specialties     String[]
  experience      Int?
  website         String?
  socialMedia     Json?
  reason          String?              @db.Text
  status          UpgradeRequestStatus @default(PENDING)
  adminNotes      String?              @db.Text
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
}

// === SOCIAL MODELS ===
model Follow {
  id             String   @id @default(uuid())
  followerId     String
  followingId    String
  status         String   @default("accepted")
  notifyNewPosts Boolean  @default(true)
  createdAt      DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id           String     @id @default(uuid())
  userId       String
  title        String
  slug         String?    @unique
  summary      String?    @db.Text
  content      Json
  contentText  String?    @db.Text
  type         PostType   @default(GENERAL)
  status       PostStatus @default(DRAFT)
  thumbnailUrl String?
  coverImage   String?
  mediaUrls    String[]
  tags         String[]
  viewCount    Int        @default(0)
  likeCount    Int        @default(0)
  commentCount Int        @default(0)
  shareCount   Int        @default(0)
  publishedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes           Like[]
  comments        Comment[]
  productMentions ProductMention[]
  savedBy         SavedPost[]
  analytics       PostAnalytics?
  wishlistItems   Wishlist[]

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([publishedAt])
  @@index([deletedAt])
  @@index([tags])
}

model Comment {
  id         String    @id @default(uuid())
  postId     String
  userId     String
  parentId   String?
  content    String    @db.Text
  mediaUrl   String?
  likeCount  Int       @default(0)
  replyCount Int       @default(0)
  isEdited   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies Comment[] @relation("CommentReplies")
  likes   Like[]    @relation("CommentLikes")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([deletedAt])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  reaction  String   @default("like")
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
}

model SavedPost {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// === PRODUCT MODELS ===
model Product {
  id             String        @id @default(uuid())
  sellerId       String
  name           String
  slug           String?       @unique
  description    String?       @db.Text
  price          Decimal       @db.Decimal(10, 2)
  discountPrice  Decimal?      @db.Decimal(10, 2)
  quantity       Int           @default(0)
  status         ProductStatus @default(DRAFT)
  images         String[]
  tags           String[]
  isCustomizable Boolean       @default(false)
  avgRating      Float?
  reviewCount    Int           @default(0)
  viewCount      Int           @default(0)
  salesCount     Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  seller          User              @relation(fields: [sellerId], references: [id])
  categories      CategoryProduct[]
  priceHistory    PriceHistory[]
  reviews         Review[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  quoteRequests   QuoteRequest[]
  productMentions ProductMention[]
  wishlistItems   Wishlist[]

  @@index([sellerId])
  @@index([status])
  @@index([avgRating])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([tags])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?
  parentId    String?
  level       Int      @default(0)
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[]        @relation("CategoryHierarchy")
  products CategoryProduct[]

  @@index([parentId])
  @@index([level])
  @@index([isActive])
}

model CategoryProduct {
  categoryId String
  productId  String

  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([categoryId, productId])
}

model PriceHistory {
  id         String   @id @default(uuid())
  productId  String
  price      Decimal  @db.Decimal(10, 2)
  changeNote String?
  createdAt  DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([createdAt])
}

model ProductMention {
  id          String  @id @default(uuid())
  postId      String
  productId   String
  contextText String? @db.Text
  position    Int?

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([postId])
  @@index([productId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int // 1-5
  title     String?
  comment   String?  @db.Text
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@index([createdAt])
}

// === CART & WISHLIST ===
model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String?
  postId    String?
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([userId, postId])
  @@index([userId])
}

// === ORDER & PAYMENT ===
model Order {
  id                String         @id @default(uuid())
  orderNumber       String         @unique
  userId            String
  addressId         String?
  status            OrderStatus    @default(PENDING)
  paymentStatus     PaymentStatus  @default(PENDING)
  totalAmount       Decimal        @db.Decimal(10, 2)
  subtotal          Decimal        @db.Decimal(10, 2)
  shippingCost      Decimal        @default(0) @db.Decimal(10, 2)
  paymentMethod     PaymentMethod?
  paymentReference  String?
  notes             String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  customer            User                 @relation("CustomerOrders", fields: [userId], references: [id])
  shippingAddress     Address?             @relation("ShippingAddress", fields: [addressId], references: [id])
  items               OrderItem[]
  paymentTransactions PaymentTransaction[]
  statusHistory       OrderStatusHistory[] @relation("OrderStatusHistory")

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  sellerId  String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  seller  User    @relation("SellerOrderItems", fields: [sellerId], references: [id])

  @@index([orderId])
  @@index([sellerId])
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  note      String?     @db.Text
  createdBy String?
  createdAt DateTime    @default(now())

  order Order @relation("OrderStatusHistory", fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([createdAt])
}

model Payment {
  id           String        @id @default(uuid())
  userId       String
  type         PaymentMethod
  isDefault    Boolean       @default(false)
  cardLast4    String?
  cardBrand    String?
  expiryMonth  Int?
  expiryYear   Int?
  holderName   String?
  bankName     String?
  accountLast4 String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions PaymentTransaction[]

  @@index([userId])
  @@index([isDefault])
}

model PaymentTransaction {
  id                String        @id @default(uuid())
  orderId           String
  userId            String
  paymentMethodId   String?
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("USD")
  status            PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod
  reference         String        @unique
  externalReference String?
  failureReason     String?
  processedAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment? @relation(fields: [paymentMethodId], references: [id])

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([reference])
}

// === QUOTE SYSTEM ===
model QuoteRequest {
  id              String      @id @default(uuid())
  productId       String
  customerId      String
  artisanId       String
  requestedPrice  Decimal?    @db.Decimal(10, 2)
  specifications  String?     @db.Text
  status          QuoteStatus @default(PENDING)
  counterOffer    Decimal?    @db.Decimal(10, 2)
  finalPrice      Decimal?    @db.Decimal(10, 2)
  customerMessage String?     @db.Text
  artisanMessage  String?     @db.Text
  expiresAt       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  product            Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer           User               @relation("CustomerQuotes", fields: [customerId], references: [id], onDelete: Cascade)
  artisan            User               @relation("ArtisanQuotes", fields: [artisanId], references: [id])
  negotiationHistory QuoteNegotiation[] @relation("QuoteNegotiationHistory")

  @@index([productId])
  @@index([customerId])
  @@index([artisanId])
  @@index([status])
}

model QuoteNegotiation {
  id            String   @id @default(uuid())
  quoteId       String
  action        String // REQUEST, ACCEPT, REJECT, COUNTER, MESSAGE
  actor         String // customer, artisan
  previousPrice Decimal? @db.Decimal(10, 2)
  newPrice      Decimal? @db.Decimal(10, 2)
  message       String?  @db.Text
  metadata      Json? // Additional data like specifications, etc.
  timestamp     DateTime @default(now())

  quote QuoteRequest @relation("QuoteNegotiationHistory", fields: [quoteId], references: [id], onDelete: Cascade)

  @@index([quoteId])
  @@index([timestamp])
}

// === MESSAGING ===
model Message {
  id         String      @id @default(uuid())
  senderId   String
  receiverId String
  content    String      @db.Text
  type       MessageType @default(TEXT)
  metadata   Json?
  isRead     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([isRead])
}

// === NOTIFICATIONS ===
model Notification {
  id          String           @id @default(uuid())
  recipientId String
  senderId    String?
  type        NotificationType
  title       String
  message     String           @db.Text
  data        Json?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())

  recipient User  @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender    User? @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([recipientId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

// === ANALYTICS & ACTIVITY ===
model PostAnalytics {
  id              String   @id @default(uuid())
  postId          String   @unique
  viewCount       Int      @default(0)
  uniqueViewers   Int      @default(0)
  avgReadTime     Float?
  conversionCount Int      @default(0)
  updatedAt       DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model UserActivity {
  id           String   @id @default(uuid())
  userId       String
  activityType String
  entityId     String?
  entityType   String?
  metadata     Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([activityType])
  @@index([entityId])
  @@index([createdAt])
}
